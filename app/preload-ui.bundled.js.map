{"version":3,"sources":["webpack:///webpack/bootstrap eec0c8bd3a889f71532f","webpack:///./app/app.html","webpack:///./app/ui/preload.js","webpack:///./node_modules/easy-ipc/lib/ipc-cli.js","webpack:///./node_modules/easy-ipc/lib/ipc-cmd-help.js","webpack:///./node_modules/easy-ipc/lib/ipc-cmd.js","webpack:///./node_modules/easy-ipc/lib/ipc.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/ElectronUtils.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusApi.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusBridgeImpl.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusBrokerImpl.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusClient.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusInterfaces.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusServiceImpl.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusServiceProxyImpl.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransport.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransportNode.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransportRenderer.js","webpack:///./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusUtils.js","webpack:///./node_modules/electron-ipc-bus/lib/electron-ipc-bus.js","webpack:///./node_modules/lazy/lazy.js","webpack:///./node_modules/uuid/index.js","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./node_modules/uuid/lib/rng.js","webpack:///./node_modules/uuid/v1.js","webpack:///./node_modules/uuid/v4.js","webpack:///external \"crypto\"","webpack:///external \"electron\"","webpack:///external \"events\"","webpack:///external \"net\"","webpack:///external \"readline\"","webpack:///external \"stream\"","webpack:///external \"util\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","console","log","window","ipcBus","CreateIpcBusClient","ipcBus_QUERYSTATE_CHANNEL","IPCBUS_CHANNEL_QUERY_STATE","ActivateIpcBusTrace","ipcRenderer","IpcCli","line2cmd","isCmd","mkCmd","readline","util","ipc","conn","this","self","stdin","process","openStdin","stdout","_rl","createInterface","on","line","write","consoleRefresh","key","ctrl","meta","shift","writeToConsole","setConnection","data","bind","info","warn","error","remoteAddress","remotePort","JSON","stringify","address","reconnect","mode","consoleEnabled","resume","prompt","output","cursorTo","pause","logTypes","fatal","type","args","arguments","Array","slice","str","color","codes","colors","stylizeWithColor","format","apply","_refreshLine","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","usage","ipcCmd","cmd","_cmds","sig2str","sig","help","out","doc","forEach","push","required","join","description","length","cmds","keys","filter","v","prefix","reduce","Math","max","map","len","indent","res","pos","split","wrap","IpcCmd","Lazy","Stream","stream","introspect","emit","missing","exec","mr","add","unshift","server","end","set","obj","func","scope","Error","pop","Ipc","net","EventEmitter","options","socketPath","port","host","delayReconnect","dataType","numReconnects","inherits","connect","cb","onError","err","removeListener","onConnect","code","isNaN","_reconnect","_parseStream","had_error","Function","once","setTimeout","listen","createServer","start","onListening","onConnection","lines","String","_onData","old_write","writable","parse","Cmd","Cli","value","GuessElectronProcessType","electron","e","processType","ipcMain","IpcBusUtils","IpcBusServiceImpl_1","IpcBusServiceProxyImpl_1","IpcBusBrokerImpl_1","IpcBusBridgeImpl_1","ElectronUtils","_CreateIpcBusBroker","busPath","ipcBusBroker","ipcOptions","ExtractIpcOptions","Logger","enable","isValid","IpcBusBrokerImpl","pid","_CreateIpcBusBridge","ipcBusBridge","IpcBusBridgeImpl","IpcBusClient_1","IpcBusTransport_1","_CreateIpcBusClient","ipcBusTransport","CreateIpcBusTransport","ipcBusClient","IpcBusCommonClient","_CreateIpcBusService","client","serviceName","serviceImpl","IpcBusServiceImpl","_CreateIpcBusServiceProxy","callTimeout","IpcBusServiceProxyImpl","_ActivateIpcBusTrace","_ActivateServiceTrace","service","IpcBusTransportNode_1","IpcBusTransportNode","[object Object]","ipcBusProcess","super","_ipcMain","_webContents","webContents","_subscriptions","ChannelConnectionMap","_requestChannels","Map","_ipcBusPeers","ipcBusData","ipcBusEvent","IPC_BUS_EVENT_SENDMESSAGE","IPC_BUS_EVENT_REQUESTMESSAGE","channel","sender","forEachChannel","connData","connKey","send","IPC_BUS_RENDERER_EVENT","IPC_BUS_EVENT_REQUESTRESPONSE","replyChannel","delete","id","timeoutDelay","IPC_BUS_TIMEOUT","Promise","resolve","reject","ipcConnect","then","msg","listenerCount","IPC_BUS_RENDERER_HANDSHAKE","addListener","event","peerId","_onHandshake","IPC_BUS_RENDERER_COMMAND","command","_onRendererMessage","catch","ipcClose","removeAllListeners","queryStateResult","peerIds","count","peer","webContentsId","releaseConnection","webContentsForRequest","_rendererCleanUp","ipcBusPeer","_ipcPushCommand","IPC_BUS_COMMAND_DISCONNECT","IPC_BUS_COMMAND_CONNECT","IPC_BUS_COMMAND_CLOSE","IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL","addRef","IPC_BUS_COMMAND_UNSUBSCRIBE_CHANNEL","unsubscribeAll","releaseAll","release","IPC_BUS_COMMAND_UNSUBSCRIBE_ALL","IPC_BUS_COMMAND_REQUESTMESSAGE","IPC_BUS_COMMAND_REQUESTCANCEL","BaseIpc","IpcBusInterfaces","_ipcServer","_queryStateLamdba","_onQueryState","_serviceAvailableLambda","_onServiceAvailable","_ipcOptions","_baseIpc","socket","_onConnection","_onClose","_ipcBusBrokerClient","IPCBUS_CHANNEL_SERVICE_AVAILABLE","off","close","hasChannel","getServiceCallChannel","queryState","request","availability","isServiceAvailable","socketForRequest","_socketCleanUp","releasePeerId","IPC_BUS_COMMAND_SENDMESSAGE","IPC_BUS_COMMAND_REQUESTRESPONSE","events_1","_ipcBusTransport","eventEmitter","timeoutDelayOrPeerName","peerName","ipcPushCommand","timeoutDelayOrChannel","listener","prependListener","prependOnceListener","IPCBUS_SERVICE_CALL_GETSTATUS","IPCBUS_SERVICE_EVENT_START","IPCBUS_SERVICE_EVENT_STOP","IPCBUS_SERVICE_WRAPPER_EVENT","ServiceStatus","started","callHandlers","supportEventEmitter","_ipcBusClient","_serviceName","_exposedInstance","_callReceivedLamdba","_onCallReceived","_prevImplEmit","_callHandlers","registerCallHandler","_getCallHandlerNames","memberName","_isFunctionVisible","_doCall","getOwnPropertyNames","getPrototypeOf","has","_hiddenMethods","eventName","sendEvent","handler","eventMsg","getServiceEventChannel","callHandler","handlerName","callArgs","result","from","Set","CallWrapperEventEmitter","_callTimeout","_eventReceivedLamdba","_onEventReceived","_delayedCalls","_wrapper","_isStarted","getStatus","serviceStatus","_onServiceStart","isStarted","wrapper","statusCallMsg","payload","callMsg","delayedCall","splice","_onServiceStop","_updateWrapper","_sendDelayedCalls","uuid","IpcBusData","IpcBusTransport","_ipcBusPeer","_peerId","v1","_requestFunctions","localRequestCallback","localIpcBusData","localIpcBusEvent","responsePromise","response","IpcBusTransportRenderer_1","IpcBusTransportRenderer","_busConn","eventOrPid","pidOrUndefined","_onIpcEventReceived","_ipcRenderer","_ipcConnect","IPC_BUS_RENDERER_CONNECT","IpcOptions","getServiceNamespace","argName","argv","startsWith","GetCmdLineArgValue","parts","_name","_channelsMap","callback","_info","connsMap","ConnectionData","size","all","_warn","clear","_release","_error","IpcBusInterfaces_1","IpcBusInterfaces_2","IpcBusInterfaces_3","IpcBusInterfaces_4","IpcBusInterfaces_5","IpcBusApi_1","IpcBusApi_2","IpcBusApi_3","IpcBusApi_4","IpcBusApi_5","IpcBusApi_6","IpcBusApi_7","CreateIpcBusBroker","CreateIpcBusBridge","CreateIpcBusService","CreateIpcBusServiceProxy","ActivateServiceTrace","em","opts","f","g","dataName","pipeName","pipe","endName","piped","newLazy","h","x","lazy","y","Duplex","read","head","tail","skip","take","takeWhile","cond","foldr","op","acc","sum","product","bucket","init","yieldTo","finalBuffer","mergeBuffers","__defineGetter__","chunkArray","chunk","newline","charCodeAt","lastNewLineIndex","Buffer","range","step","infinite","j","arg","startOpen","endClosed","progression","abs","parseInt","stopInfinite","nextTick","buffers","isArray","finalBufferLength","currentBuffer","currentSize","left","right","copy","v4","byteToHex","toString","substr","buf","offset","bth","crypto","randomBytes","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","tl","tmh","rnds","random","ii","require"],"mappings":"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","file":"preload-ui.bundled.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/ui/preload.js\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap eec0c8bd3a889f71532f","module.exports = \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\\\"utf-8\\\">\\n    <title>Bastet</title>\\n    <script>\\n      (function() {\\n        if (!process.env.HOT) {\\n          const link = document.createElement('link');\\n          link.rel = 'stylesheet';\\n          link.href = './dist/style.css';\\n          // HACK: Writing the script path should be done with webpack\\n          document.getElementsByTagName('head')[0].appendChild(link);\\n        }\\n      }());\\n    </script>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script>\\n      {\\n        const scripts = [];\\n\\n        // Dynamically insert the DLL script in development env in the\\n        // renderer process\\n        if (process.env.NODE_ENV === 'development') {\\n          scripts.push('../dll/renderer.dev.dll.js');\\n        }\\n\\n        // Dynamically insert the bundled app script in the renderer process\\n        const port = process.env.PORT || 1212;\\n        scripts.push(\\n          (process.env.HOT)\\n            ? 'http://localhost:' + port + '/dist/renderer.dev.js'\\n            : './dist/renderer.prod.js'\\n        );\\n\\n        document.write(\\n          scripts\\n            .map(script => '<script defer src=\\\"' + script + '\\\"><\\\\/script>')\\n            .join('')\\n        );\\n      }\\n    </script>\\n  </body>\\n</html>\\n\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/app.html\n// module id = ./app/app.html\n// module chunks = 0","//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Electron Test App\n\nconsole.log(\"preload\")\n\nwindow.ipcBus = require('electron-ipc-bus').CreateIpcBusClient();\nwindow.ipcBus_QUERYSTATE_CHANNEL = require('electron-ipc-bus').IPCBUS_CHANNEL_QUERY_STATE;\nrequire('electron-ipc-bus').ActivateIpcBusTrace(true);\n\nwindow.ipcRenderer = require('electron').ipcRenderer;\n\nvar content = require('../app.html');\n\n// console.log(\"preload!!\", content)\nconsole.log(\"window\", window)\n\n/*\nwindow.onload = () => {\n  document.open(\"text/html\", \"replace\");\n  document.write(content);  // htmlCode is the variable you called newDocument\n  document.close();\n}\n*/\n\n\n\n\n// WEBPACK FOOTER //\n// ./app/ui/preload.js","\nmodule.exports = IpcCli\n\nvar line2cmd = require('./ipc-cmd').line2cmd\n  , mkCmd = require('./ipc-cmd').mkCmd\n  , isCmd = require('./ipc-cmd').isCmd\n  , readline = require('readline')\n  , util = require('util')\n\nfunction IpcCli(ipc, conn) {\n  if(!(this instanceof IpcCli)) return new IpcCli(ipc, conn)\n  var self = this\n  \n  self.ipc = ipc\n  self.conn = conn\n  \n  // setup console\n  \n  self.stdin = process.openStdin()\n  self.stdout = process.stdout\n  \n  self._rl = readline.createInterface(self.stdin, self.stdout)\n  \n  self._rl.on('line', function(line) {\n    self.conn.write(line2cmd(line))\n    self.consoleRefresh()\n  })\n  \n  self.stdin.on('keypress', function(c, key) {\n    if(key && key.name === 'c' && key.ctrl && ! key.meta && !key.shift) {\n      self.console(false)\n      self.writeToConsole('Press [Ctrl+C] again to quit.\\n')\n    }\n  })\n  \n  // handle connect and reconnect\n  self.ipc.on('connect', function(conn) {\n    self.setConnection(conn)\n  })\n  self.ipc.on('reconnect', function(conn) {\n    self.setConnection(conn)\n  })\n  \n  // print everything that is not a command\n  self.ipc.on('data', function(data) {\n    if(!isCmd(data)) {\n      self.writeToConsole(data)\n    }\n  })\n  \n  // set current connection\n  self.setConnection(conn)\n  \n  // overwrite console.*\n  console.log = self.writeToConsole.bind(self)\n  console.info = self.writeToConsole.bind(self, 'info')\n  console.warn = self.writeToConsole.bind(self, 'warn')\n  console.error = self.writeToConsole.bind(self, 'error')\n}\n\nIpcCli.prototype.setConnection = function(conn) {\n  var self = this\n  \n  if(self.conn) {\n    self.conn = null\n  }\n  \n  self.conn = conn\n  self.console(true)\n  self.writeToConsole('connected to '+conn.remoteAddress+':'+conn.remotePort+' from '+JSON.stringify(conn.address())+'\\n')\n  self.consoleRefresh()\n  \n  conn.on('close', function() {\n    console.error('connection lost!')\n    self.conn = null\n    self.console(false)\n    if(self.ipc.reconnect) {\n      console.info('reconnecting...')\n    }\n  })\n}\n\nIpcCli.prototype.console = function(mode) {\n  if(mode) {\n    this.consoleEnabled = true\n    this.stdin.resume()\n    this._rl.resume()\n    this._rl.prompt()\n  } else {\n    if(this.consoleEnabled) {\n      this._rl.output.cursorTo(0)\n    }\n    this.consoleEnabled = false\n    this.stdin.pause()\n    this._rl.pause()\n  }\n}\n\nvar logTypes = {\n  'log':     'grey'\n  , 'info':  'cyan'\n  , 'warn':  'magenta'\n  , 'error': 'red'\n  , 'fatal': 'inverse'\n}\n\nIpcCli.prototype.writeToConsole = function() {\n  var type, args\n  if(logTypes[arguments[0]] != null) {\n    type = arguments[0]\n    args = Array.prototype.slice.call(arguments, 1)\n  } else {\n    type = 'log'\n    args = arguments\n  }\n  var str = stylizeWithColor(util.format.apply(util.format, args), logTypes[type])+'\\n'\n  if(this.consoleEnabled) {\n    this._rl.output.cursorTo(0)\n    this.stdout.write(str)\n    this.consoleRefresh()\n  } else {\n    this.stdout.write(str)\n  }\n}\n\nIpcCli.prototype.consoleRefresh = function() {\n  if(this.consoleEnabled) {\n    this._rl._refreshLine()\n  }\n}\n\n// https://github.com/trentm/node-bunyan/blob/master/bin/bunyan\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n// Suggested colors (some are unreadable in common cases):\n// - Good: cyan, yellow (limited use), grey, bold, green, magenta, red\n// - Bad: blue (not visible on cmd.exe)\nvar colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\nfunction stylizeWithColor(str, color) {\n  if (!str)\n    return '';\n  var codes = colors[color];\n  if (codes) {\n    return '\\033[' + codes[0] + 'm' + str +\n           '\\033[' + codes[1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction stylizeWithoutColor(str, color) {\n  return str;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/easy-ipc/lib/ipc-cli.js\n// module id = ./node_modules/easy-ipc/lib/ipc-cli.js\n// module chunks = 0","\nmodule.exports = {\n  help: help\n  , usage: usage\n}\n\nusage.doc = 'Prints the usage-description of a command.'\n\nusage.sig = [\n  {   name: 'name'\n    , required: true\n    , type: 'String'\n    , description: 'The name of a command.'\n  }\n]\n\nfunction usage(name, conn, ipcCmd) {\n  var cmd = ipcCmd._cmds[name]\n  if(cmd) {\n    conn.cmd['.info']('Usage: %s', name, sig2str(cmd.sig))\n  } else {\n    conn.cmd['.error']('Unknown command: %s', name)\n  }\n}\n\nhelp.doc = 'Prints this help. Type help [command] to get detailed informations.'\n\nhelp.sig = [\n  {   name: 'name'\n    , required: false\n    , type: 'String'\n    , description: 'The name of a command.'\n  }\n]\n\nfunction help(name, conn, ipcCmd) {\n  if(name) {\n    // detailed help\n    var cmd = ipcCmd._cmds[name]\n    if(cmd) {\n      var out = ''\n        , args = []\n      out += name\n      if(cmd.doc) {\n        out += '\\n'+cmd.doc+'\\n'\n      }\n      out += '\\nUsage: '+name+' '+sig2str(cmd.sig)+'\\n'\n      cmd.sig.forEach(function(sig) {\n        var s = []\n        if(sig.type) s.push('<'+sig.type+'>')\n        if(sig.required) s.push(sig.name)\n        else s.push('['+sig.name+']')\n        s = s.join(' ')\n        if(sig.description) s += ' - '+sig.description\n        args.push('  '+s)\n      })\n      if(args.length) {\n        out += '\\nArguments:\\n\\n'+args.join('\\n')+'\\n'\n      }\n      conn.cmd['.info'](out)\n    } else {\n      conn.cmd['.error']('Unknown command: %s', name)\n    }\n  } else {\n    // list of commands\n    // exclude commands starting with a .\n    var cmds = Object.keys(ipcCmd._cmds).filter(function(v) {\n          return v[0] !== '.'\n          return true\n        })\n      , prefix = cmds.reduce(function(p, c) {\n          return Math.max(p, c.length)\n        }, 0)\n      , prefix = new Array(Math.max(11, prefix+1)).join(' ') + '  '\n      , out = cmds.map(function(name) {\n          var cmd = ipcCmd._cmds[name]\n          return (prefix+name).slice(-1*prefix.length) + ' - ' + wrap(cmd.doc, 48, prefix + '   ')\n        })\n    conn.cmd['.info']('Available commands:\\n\\n%s\\n\\n%d total.', out.join('\\n'), cmds.length)\n  }\n}\n\nfunction wrap(str, len, indent) {\n  len = len || 78\n  indent = indent || ''\n  var res = [indent], pos = 0\n  str = str.split(' ')\n  while(str.length) {\n    var s = str.shift()\n    if((res[pos]+s).length > len+indent.length) {\n      res.push(indent)\n      pos++\n    } else if(res[pos] !== indent) {\n      res[pos] += ' '\n    }\n    res[pos] += s\n  }\n  return res.join('\\n').slice(indent.length)\n}\n\nfunction sig2str(sig) {\n  var s = []\n  sig.forEach(function(sig, i) {\n    var name = sig.name || 'arg'+i\n    if(sig.required) s.push(name)\n    else s.push('['+name+']')\n  })\n  s = s.join(' ')\n  return s\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/easy-ipc/lib/ipc-cmd-help.js\n// module id = ./node_modules/easy-ipc/lib/ipc-cmd-help.js\n// module chunks = 0","\nmodule.exports = IpcCmd\n\nvar Lazy = require('lazy')\n  , Stream = require('stream').Stream\n\nfunction IpcCmd(ipc, conn) {\n  if(!(this instanceof IpcCmd)) return new IpcCmd(ipc, conn)\n  var self = this\n  \n  self.ipc = ipc\n  self._cmds = {}\n  \n  \n  // stream commands to executor\n  var stream = new Stream()\n  self.ipc.on('connection', function(conn) {\n    conn.write('Welcome!')\n    conn.write('Type \"help\" for help.')\n  })\n  self.ipc.on('connection', introspect)\n  self.ipc.on('reconnect', introspect)\n  self.ipc.on('data', function(d, c) {\n    stream.emit('data', {conn: c, data: d})\n  })\n  Lazy(stream)\n    .filter(function(d) {\n      return isCmd(d.data)\n    })\n    .forEach(function(d) {\n      // executor\n      var conn = d.conn\n        , name = d.data.name\n        , args = d.data.args||[]\n        , cmd = self._cmds[name]\n      \n      // console.log(name, args)\n      \n      if(cmd) {\n        // if sig exists, check args against it\n        if(cmd.sig) {\n          var missing = cmd.sig.length - args.length\n          \n          // too much arguments will break every command that\n          // uses conn or self\n          if(missing < 0) {\n            exec('.error', 'Too much arguments: %s %s', name, args.join(' '), conn)\n            return\n          }\n          \n          // check if all required argument were passed\n          var mr = cmd.sig.reduce(function(p, s, i) {\n            if(s.required && !(args[i]!=null)) {\n              return p+1\n            }\n            return p\n          }, 0)\n          if(mr) {\n            exec('.error', 'Missing %d required arguments: %s %s', mr, name, args.join(' '), conn)\n            self._cmds.usage(name, conn, self)\n            return\n          }\n          \n          // fill the holes\n          while(missing > 0) {\n            args.push(null)\n            missing -= 1\n          }\n          \n          // Always put conn and self at the end of the argument-list\n          // Never mention both in the .sig\n          // This is suboptimal, but i don't know how to solve this\n          // FIXME\n          args.push(conn)\n          args.push(self)\n        } else {\n          // if sig does not exist, use cmd.length as a basic arg check\n          var missing = cmd.length - args.length\n          \n          while(missing > 0) {\n            if(missing === 1) {\n              args.push(conn)\n              missing -= 1\n            } else if(missing === 2) {\n              args.push(conn)\n              args.push(self)\n              missing -= 2\n            } else {\n              args.push(null)\n              missing -= 1\n            }\n          }\n        }\n        \n        cmd.apply(self, args||[])\n      } else {\n        exec('.error', 'Unknown command: %s', name, conn)\n      }\n    })\n  \n  // stream rest to stdout\n  /* Lazy(stream)\n    .filter(function(d) {\n      return ! isCmd(d.data)\n    })\n    .forEach(function(d) {\n      console.log(d.data)\n    }) */\n  \n  // some very basic commands used by almost all applications\n  \n  self.add('.commands', function(conn) {\n    exec('.commands-remote', Object.keys(self._cmds), conn)\n  })\n  \n  self.add('.commands-remote', function(cmds, conn) {\n    conn.cmd = conn.cmd || {}\n    cmds.forEach(function(name) {\n      conn.cmd[name] = function() {\n        var args = Array.prototype.slice.call(arguments, 0)\n        args.unshift(name)\n        args.push(conn)\n        exec.apply(exec, args)\n      }\n    })\n  })\n  \n  self.add('.log', function() {\n    console.log.apply(console.log, arguments)\n  })\n  \n  self.add('.info', function() {\n    console.info.apply(console.info, arguments)\n  })\n  \n  self.add('.warn', function() {\n    console.warn.apply(console.warn, arguments)\n  })\n  \n  self.add('.error', function() {\n    console.error.apply(console.error, arguments)\n  })\n    \n  self.add('exit', function(conn, server) {\n    conn.end()\n  })\n  \n  self.set(require('./ipc-cmd-help'))\n  \n  if(conn) {\n    introspect(conn)\n  }\n}\n\nIpcCmd.prototype.set = function(obj) {\n  var self = this\n  Object.keys(obj).forEach(function(name) {\n    self.add(name, obj[name], null, obj[name].doc, obj[name].sig)\n  })\n  return this\n}\n\nIpcCmd.prototype.add = function(name, func, scope, doc, sig) {\n  if(this._cmds[name])\n    throw new Error('Command already defined: '+name)\n  this._cmds[name] = func.bind(scope || this)\n  this._cmds[name].doc = doc != null ? doc : ''\n  this._cmds[name].sig = sig != null ? sig : null\n  return this\n}\n\nvar introspect = IpcCmd.introspect = function(conn) {\n  exec('.commands', conn)\n}\n\nvar exec = IpcCmd.exec = function(/* cmdName, arg1, arg2, ..., conn*/) {\n  var args = Array.prototype.slice.call(arguments, 0)\n    , conn = args.pop()\n  if(conn.write) {\n    conn.write(mkCmd.apply(mkCmd, args))\n    return true\n  }\n  return false\n}\n\nvar isCmd = IpcCmd.isCmd = function(d) {\n  return d && d.type === 'cmd'\n}\n\nvar mkCmd = IpcCmd.mkCmd = function(/* cmd, arg1, arg2, ... */) {\n  var args = Array.prototype.slice.call(arguments, 0)\n  return {type: 'cmd', name: args[0], args: args.slice(1)}\n}\n\nvar line2cmd = IpcCmd.line2cmd = function(line) {\n  line = line.split(' ')\n  return {type: 'cmd', name: line[0], args: line.slice(1)}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/easy-ipc/lib/ipc-cmd.js\n// module id = ./node_modules/easy-ipc/lib/ipc-cmd.js\n// module chunks = 0","\nmodule.exports = Ipc\n\nvar net = require('net')\n  , util= require('util')\n  , EventEmitter = require('events').EventEmitter\n  , Stream = require('stream').Stream\n  , Lazy = require('lazy')\n\nfunction Ipc(options) {\n  if(!(this instanceof Ipc)) return new Ipc(options)\n  Stream.call(this)\n  \n  var self = this\n  \n  options = options || {}\n  \n  self.socketPath = options.socketPath != null ? options.socketPath : false\n  self.port = options.port != null ? options.port : 7100\n  self.host = options.host != null ? options.host : 'localhost'\n  \n  self.reconnect = options.reconnect != null ? options.reconnect : true\n  self.delayReconnect = options.delayReconnect != null ? options.delayReconnect : 3000\n  \n  self.dataType = options.dataType != null ? options.dataType : 'json'\n  \n  self.numReconnects = 0\n}\nutil.inherits(Ipc, Stream)\n\nIpc.prototype.connect = function(port, host, cb) {\n  var self = this\n  \n  if(port instanceof Function) {\n    cb = port\n    port = null\n  }\n  if(host instanceof Function) {\n    cb = host\n    host = null\n  }\n  \n  port = port || self.socketPath || self.port\n  host = host || (!isNaN(port) ? self.host : null)\n  cb = cb || function(){}\n  \n  var conn\n  \n  function onError(err) {\n    conn.removeListener('connect', onConnect)\n    \n    if(err.code === 'ENOENT' && isNaN(port) && self.port) {\n      self.emit('warn', new Error(err.code+' on '+port+', '+host))\n      self.connect(self.port, cb)\n      return\n    } else if(err.code === 'ECONNREFUSED' && self.numReconnects) {\n      self.emit('warn', new Error(err.code+' on '+port+', '+host))\n      return self._reconnect(port, host)\n    }\n    \n    cb(err)\n    self.emit('error', err)\n  }\n  \n  function onConnect() {\n    conn.removeListener('error', onError)\n    \n    self._parseStream(conn)\n    \n    conn.on('close', function(had_error) {\n      self.emit('close', had_error, conn)\n      \n      // reconnect\n      if(self.reconnect) {\n        self._reconnect(port, host)\n      }\n    })\n    \n    cb(null, conn)\n    \n    if(self.numReconnects>0) {\n      self.emit('reconnect', conn)\n      self.numReconnects = 0\n    } else {\n      self.emit('connect', conn)\n    }\n  }\n  \n  if(port && host) {\n    conn = net.connect(port, host)\n  } else {\n    conn = net.connect(port)\n  }\n  \n  conn.once('error', onError)\n  conn.once('connect', onConnect)\n}\n\nIpc.prototype._reconnect = function(port, host) {\n  var self = this\n  self.numReconnects += 1\n  if(self.delayReconnect) {\n    setTimeout(function() {\n      self.connect(port, host)\n    }, self.delayReconnect)\n  } else {\n    self.connect(port, host)\n  }\n}\n\nIpc.prototype.listen = function(port, host, cb) {\n  var self = this\n  \n  if(port instanceof Function) {\n    cb = port\n    port = null\n  }\n  if(host instanceof Function) {\n    cb = host\n    host = null\n  }\n  \n  port = port || self.socketPath || self.port\n  host = host || (!isNaN(port) ? self.host : null)\n  cb = cb || function(){}\n  \n  function onError(err) {\n    if(err.code === 'EACCES' && isNaN(port) && self.port) {\n      self.emit('warn', new Error(err.code+' on '+port+', '+host))\n      self.listen(self.port, cb)\n      return\n    }\n    cb(err)\n    self.emit('error', err)\n  }\n  \n  function onConnection(conn) {\n    self._parseStream(conn, server)\n    \n    conn.on('close', function(had_error) {\n      self.emit('close', had_error, conn, server)\n    })\n    \n    cb(null, conn, server)\n    self.emit('connection', conn, server)\n  }\n  \n  var server = net.createServer()\n  \n  server.once('error', onError)\n  \n  server.once('listening', function() {\n    server.removeListener('error', onError)\n    self.emit('listening', server)\n  })\n  \n  server.on('connection', onConnection)\n  \n  if(port && host) {\n    server.listen(port, host)\n  } else {\n    server.listen(port)\n  }\n}\n\nIpc.prototype.start = function(port, host, cb) {\n  var self = this\n  \n  if(port instanceof Function) {\n    cb = port\n    port = null\n  }\n  if(host instanceof Function) {\n    cb = host\n    host = null\n  }\n  \n  port = port || self.socketPath || self.port\n  host = host || (!isNaN(port) ? self.host : null)\n  cb = cb || function(){}\n  \n  function onError(err) {\n    if(err.code == 'ECONNREFUSED') {\n      self.emit('warn', new Error(err.code+' on '+port+', '+host))\n      self.listen(port, host)\n    } else {\n      self.removeListener('listening', onListening)\n      self.removeListener('connection', onConnection)\n      self.removeListener('connect', onConnect)\n      cb(err)\n      self.emit('error', err)\n    }\n  }\n  \n  function onListening(server) {\n    self.removeListener('error', onError)\n    self.removeListener('connection', onConnection)\n    self.removeListener('connect', onConnect)\n    cb(null, true, server)\n  }\n  \n  function onConnection(conn, server) {\n    self.removeListener('error', onError)\n    self.removeListener('listening', onListening)\n    self.removeListener('connect', onConnect)\n    cb(null, true, conn, server)\n  }\n  \n  function onConnect(conn) {\n    self.removeListener('error', onError)\n    self.removeListener('listening', onListening)\n    self.removeListener('connection', onConnection)\n    cb(null, false, conn)\n  }\n  \n  self.once('error', onError)\n  self.once('listening', onListening)\n  self.once('connection', onConnection)\n  self.once('connect', onConnect)\n  \n  self.connect(port, host)\n}\n\nIpc.prototype._parseStream = function(conn, server) {\n  var self = this\n  \n  // each line of the stream is one unit of data\n  Lazy(conn)\n    .lines\n    .map(String)\n    .forEach(self._onData.bind(self, conn, server))\n  \n  // overwrite .write() of the connection\n  var old_write = conn.write\n  conn.write = function() {\n    if(conn.writable) {\n      if(self.dataType === 'json') {\n        arguments[0] = JSON.stringify(arguments[0])+'\\n'\n      }\n      return old_write.apply(conn, arguments)\n    } else {\n      self.emit('warn', new Error('Connection is not writable.'))\n    }\n  }\n}\n\nIpc.prototype._onData = function(conn, server, data) {\n  if(this.dataType === 'json') {\n    data = JSON.parse(data)\n  }\n  \n  if(server) {\n    this.emit('data', data, conn, server)\n  } else {\n    this.emit('data', data, conn)\n  }\n}\n\n// load complementing extensions\nIpc.Cmd = require('./ipc-cmd')\nIpc.Cli = require('./ipc-cli')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/easy-ipc/lib/ipc.js\n// module id = ./node_modules/easy-ipc/lib/ipc.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction GuessElectronProcessType() {\r\n    let electron = null;\r\n    try {\r\n        electron = require('electron');\r\n    }\r\n    catch (e) {\r\n        return 'node';\r\n    }\r\n    let processType = process.type;\r\n    if (processType == null) {\r\n        processType = 'node';\r\n        if (electron.ipcRenderer) {\r\n            processType = 'renderer';\r\n        }\r\n        else {\r\n            if (electron.ipcMain) {\r\n                processType = 'browser';\r\n            }\r\n        }\r\n    }\r\n    return processType;\r\n}\r\nexports.GuessElectronProcessType = GuessElectronProcessType;\r\n//# sourceMappingURL=ElectronUtils.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/ElectronUtils.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/ElectronUtils.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nconst IpcBusServiceImpl_1 = require(\"./IpcBusServiceImpl\");\r\nconst IpcBusServiceProxyImpl_1 = require(\"./IpcBusServiceProxyImpl\");\r\nconst IpcBusBrokerImpl_1 = require(\"./IpcBusBrokerImpl\");\r\nconst IpcBusBridgeImpl_1 = require(\"./IpcBusBridgeImpl\");\r\nconst ElectronUtils = require(\"./ElectronUtils\");\r\nfunction _CreateIpcBusBroker(busPath) {\r\n    let ipcBusBroker = null;\r\n    let ipcOptions = IpcBusUtils.ExtractIpcOptions(busPath);\r\n    let processType = ElectronUtils.GuessElectronProcessType();\r\n    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`_CreateIpcBusBroker process type = ${processType}, ipc options = ${ipcOptions}`);\r\n    switch (processType) {\r\n        case 'browser':\r\n        case 'node':\r\n            if (ipcOptions.isValid()) {\r\n                ipcBusBroker = new IpcBusBrokerImpl_1.IpcBusBrokerImpl({ type: processType, pid: process.pid }, ipcOptions);\r\n            }\r\n            break;\r\n        case 'renderer':\r\n        default:\r\n            break;\r\n    }\r\n    return ipcBusBroker;\r\n}\r\nexports._CreateIpcBusBroker = _CreateIpcBusBroker;\r\nfunction _CreateIpcBusBridge(busPath) {\r\n    let ipcBusBridge = null;\r\n    let ipcOptions = IpcBusUtils.ExtractIpcOptions(busPath);\r\n    let processType = ElectronUtils.GuessElectronProcessType();\r\n    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`_CreateIpcBusBridge process type = ${processType}, ipc options = ${ipcOptions}`);\r\n    switch (processType) {\r\n        case 'browser':\r\n            if (ipcOptions.isValid()) {\r\n                ipcBusBridge = new IpcBusBridgeImpl_1.IpcBusBridgeImpl({ type: processType, pid: process.pid }, ipcOptions);\r\n            }\r\n            break;\r\n        case 'renderer':\r\n        case 'node':\r\n        default:\r\n            break;\r\n    }\r\n    return ipcBusBridge;\r\n}\r\nexports._CreateIpcBusBridge = _CreateIpcBusBridge;\r\nconst IpcBusClient_1 = require(\"./IpcBusClient\");\r\nconst IpcBusTransport_1 = require(\"./IpcBusTransport\");\r\nfunction _CreateIpcBusClient(busPath) {\r\n    let ipcOptions = IpcBusUtils.ExtractIpcOptions(busPath);\r\n    let ipcBusTransport = IpcBusTransport_1.CreateIpcBusTransport(ipcOptions);\r\n    let ipcBusClient = null;\r\n    if (ipcBusTransport != null) {\r\n        ipcBusClient = new IpcBusClient_1.IpcBusCommonClient(ipcBusTransport);\r\n    }\r\n    return ipcBusClient;\r\n}\r\nexports._CreateIpcBusClient = _CreateIpcBusClient;\r\nfunction _CreateIpcBusService(client, serviceName, serviceImpl = undefined) {\r\n    return new IpcBusServiceImpl_1.IpcBusServiceImpl(client, serviceName, serviceImpl);\r\n}\r\nexports._CreateIpcBusService = _CreateIpcBusService;\r\nfunction _CreateIpcBusServiceProxy(client, serviceName, callTimeout = 1000) {\r\n    return new IpcBusServiceProxyImpl_1.IpcBusServiceProxyImpl(client, serviceName, callTimeout);\r\n}\r\nexports._CreateIpcBusServiceProxy = _CreateIpcBusServiceProxy;\r\nfunction _ActivateIpcBusTrace(enable) {\r\n    IpcBusUtils.Logger.enable = enable;\r\n}\r\nexports._ActivateIpcBusTrace = _ActivateIpcBusTrace;\r\nfunction _ActivateServiceTrace(enable) {\r\n    IpcBusUtils.Logger.service = enable;\r\n}\r\nexports._ActivateServiceTrace = _ActivateServiceTrace;\r\n//# sourceMappingURL=IpcBusApi.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusApi.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusApi.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nconst IpcBusTransportNode_1 = require(\"./IpcBusTransportNode\");\r\nclass IpcBusBridgeImpl extends IpcBusTransportNode_1.IpcBusTransportNode {\r\n    constructor(ipcBusProcess, ipcOptions) {\r\n        super(ipcBusProcess, ipcOptions);\r\n        this._ipcMain = require('electron').ipcMain;\r\n        this._webContents = require('electron').webContents;\r\n        this._subscriptions = new IpcBusUtils.ChannelConnectionMap('IPCBus:Bridge');\r\n        this._requestChannels = new Map();\r\n        this._ipcBusPeers = new Map();\r\n    }\r\n    _onEventReceived(name, ipcBusData, ipcBusEvent, args) {\r\n        switch (name) {\r\n            case IpcBusUtils.IPC_BUS_EVENT_SENDMESSAGE:\r\n            case IpcBusUtils.IPC_BUS_EVENT_REQUESTMESSAGE: {\r\n                IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Bridge] Received ${name} on channel '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name}`);\r\n                this._subscriptions.forEachChannel(ipcBusEvent.channel, (connData, channel) => {\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Bridge] Forward send message received on '${channel}' to peer #Renderer_${connData.connKey}`);\r\n                    connData.conn.send(IpcBusUtils.IPC_BUS_RENDERER_EVENT, name, ipcBusData, ipcBusEvent, args);\r\n                });\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_EVENT_REQUESTRESPONSE: {\r\n                IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Bridge] Received ${name} on channel '${ipcBusData.replyChannel}' from peer #${ipcBusEvent.sender.name}`);\r\n                let webContents = this._requestChannels.get(ipcBusData.replyChannel);\r\n                if (webContents) {\r\n                    this._requestChannels.delete(ipcBusData.replyChannel);\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Bridge] Forward send response received on '${ipcBusData.replyChannel}' to peer #Renderer_${webContents.id}`);\r\n                    webContents.send(IpcBusUtils.IPC_BUS_RENDERER_EVENT, name, ipcBusData, ipcBusEvent, args);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    start(timeoutDelay) {\r\n        if (timeoutDelay == null) {\r\n            timeoutDelay = IpcBusUtils.IPC_BUS_TIMEOUT;\r\n        }\r\n        let p = new Promise((resolve, reject) => {\r\n            this.ipcConnect(timeoutDelay)\r\n                .then((msg) => {\r\n                if (this._ipcMain.listenerCount(IpcBusUtils.IPC_BUS_RENDERER_HANDSHAKE) === 0) {\r\n                    this._ipcMain.addListener(IpcBusUtils.IPC_BUS_RENDERER_HANDSHAKE, (event, peerId) => this._onHandshake(event, peerId));\r\n                }\r\n                if (this._ipcMain.listenerCount(IpcBusUtils.IPC_BUS_RENDERER_COMMAND) === 0) {\r\n                    this._ipcMain.addListener(IpcBusUtils.IPC_BUS_RENDERER_COMMAND, (event, command, ipcBusData, ipcBusEvent, args) => this._onRendererMessage(event, command, ipcBusData, ipcBusEvent, args));\r\n                }\r\n                IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Bridge] Installed`);\r\n                resolve(msg);\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n        return p;\r\n    }\r\n    stop() {\r\n        this.ipcClose();\r\n        this._ipcMain.removeAllListeners(IpcBusUtils.IPC_BUS_RENDERER_HANDSHAKE);\r\n        this._ipcMain.removeAllListeners(IpcBusUtils.IPC_BUS_RENDERER_COMMAND);\r\n    }\r\n    queryState() {\r\n        let queryStateResult = [];\r\n        this._subscriptions.forEach((connData, channel) => {\r\n            connData.peerIds.forEach((count, peerId) => {\r\n                queryStateResult.push({ channel: channel, peer: this._ipcBusPeers.get(peerId), count: count });\r\n            });\r\n        });\r\n        return queryStateResult;\r\n    }\r\n    _rendererCleanUp(webContents, webContentsId, peerId) {\r\n        this._subscriptions.releaseConnection(webContentsId);\r\n        this._requestChannels.forEach((webContentsForRequest, channel) => {\r\n            if (webContentsForRequest === webContents) {\r\n                this._requestChannels.delete(channel);\r\n            }\r\n        });\r\n    }\r\n    _onHandshake(event, peerId) {\r\n        const webContents = event.sender;\r\n        let webContentsId = webContents.id;\r\n        webContents.addListener('destroyed', () => {\r\n            this._rendererCleanUp(webContents, webContentsId, peerId);\r\n            let ipcBusPeer = this._ipcBusPeers.get(peerId);\r\n            if (ipcBusPeer) {\r\n                this._ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_DISCONNECT, { peerId: peerId }, { channel: '', sender: ipcBusPeer });\r\n                this._ipcBusPeers.delete(peerId);\r\n            }\r\n        });\r\n        webContents.send(IpcBusUtils.IPC_BUS_RENDERER_HANDSHAKE, webContents.id);\r\n    }\r\n    _onRendererMessage(event, command, ipcBusData, ipcBusEvent, args) {\r\n        const webContents = event.sender;\r\n        IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Bridge] Peer #${ipcBusEvent.sender.name} post ${command} on '${ipcBusEvent.channel}'`);\r\n        switch (command) {\r\n            case IpcBusUtils.IPC_BUS_COMMAND_CONNECT: {\r\n                this._ipcBusPeers.set(ipcBusData.peerId, ipcBusEvent.sender);\r\n                webContents.send(IpcBusUtils.IPC_BUS_COMMAND_CONNECT, webContents.id);\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_COMMAND_DISCONNECT:\r\n            case IpcBusUtils.IPC_BUS_COMMAND_CLOSE: {\r\n                command = IpcBusUtils.IPC_BUS_COMMAND_DISCONNECT;\r\n                this._rendererCleanUp(webContents, webContents.id, ipcBusData.peerId);\r\n                this._ipcBusPeers.delete(ipcBusData.peerId);\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL: {\r\n                this._subscriptions.addRef(ipcBusEvent.channel, webContents.id, webContents, ipcBusData.peerId);\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_COMMAND_UNSUBSCRIBE_CHANNEL: {\r\n                if (ipcBusData.unsubscribeAll) {\r\n                    this._subscriptions.releaseAll(ipcBusEvent.channel, webContents.id, ipcBusData.peerId);\r\n                }\r\n                else {\r\n                    this._subscriptions.release(ipcBusEvent.channel, webContents.id, ipcBusData.peerId);\r\n                }\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_COMMAND_UNSUBSCRIBE_ALL: {\r\n                this._rendererCleanUp(webContents, webContents.id, ipcBusData.peerId);\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_COMMAND_REQUESTMESSAGE: {\r\n                this._requestChannels.set(ipcBusData.replyChannel, webContents);\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_COMMAND_REQUESTCANCEL: {\r\n                this._requestChannels.delete(ipcBusData.replyChannel);\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n        this._ipcPushCommand(command, ipcBusData, ipcBusEvent, args);\r\n    }\r\n}\r\nexports.IpcBusBridgeImpl = IpcBusBridgeImpl;\r\n//# sourceMappingURL=IpcBusBridgeImpl.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusBridgeImpl.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusBridgeImpl.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BaseIpc = require(\"easy-ipc\");\r\nconst IpcBusInterfaces = require(\"./IpcBusInterfaces\");\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nconst IpcBusClient_1 = require(\"./IpcBusClient\");\r\nconst IpcBusTransportNode_1 = require(\"./IpcBusTransportNode\");\r\nclass IpcBusBrokerImpl {\r\n    constructor(ipcBusProcess, ipcOptions) {\r\n        this._ipcServer = null;\r\n        this._queryStateLamdba = (ipcBusEvent, replyChannel) => this._onQueryState(ipcBusEvent, replyChannel);\r\n        this._serviceAvailableLambda = (ipcBusEvent, serviceName) => this._onServiceAvailable(ipcBusEvent, serviceName);\r\n        this._ipcOptions = ipcOptions;\r\n        this._baseIpc = new BaseIpc();\r\n        this._subscriptions = new IpcBusUtils.ChannelConnectionMap('IPCBus:Broker');\r\n        this._requestChannels = new Map();\r\n        this._ipcBusPeers = new Map();\r\n        this._baseIpc.on('connection', (socket, server) => this._onConnection(socket, server));\r\n        this._baseIpc.on('close', (err, socket, server) => this._onClose(err, socket, server));\r\n        this._baseIpc.on('data', (data, socket, server) => this._onData(data, socket, server));\r\n        let ipcBusTransport = new IpcBusTransportNode_1.IpcBusTransportNode(ipcBusProcess, ipcOptions);\r\n        this._ipcBusBrokerClient = new IpcBusClient_1.IpcBusCommonClient(ipcBusTransport);\r\n    }\r\n    start(timeoutDelay) {\r\n        if (timeoutDelay == null) {\r\n            timeoutDelay = IpcBusUtils.IPC_BUS_TIMEOUT;\r\n        }\r\n        let p = new Promise((resolve, reject) => {\r\n            this._baseIpc.once('listening', (server) => {\r\n                if (this._ipcServer) {\r\n                    resolve('started');\r\n                }\r\n                else {\r\n                    this._ipcServer = server;\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Listening for incoming connections on ${this._ipcOptions}`);\r\n                    this._ipcBusBrokerClient.connect(`Broker_${process.pid}`)\r\n                        .then(() => {\r\n                        this._ipcBusBrokerClient.on(IpcBusInterfaces.IPCBUS_CHANNEL_QUERY_STATE, this._queryStateLamdba);\r\n                        this._ipcBusBrokerClient.on(IpcBusInterfaces.IPCBUS_CHANNEL_SERVICE_AVAILABLE, this._serviceAvailableLambda);\r\n                        resolve('started');\r\n                    })\r\n                        .catch((err) => reject(`Broker client error = ${err}`));\r\n                }\r\n            });\r\n            setTimeout(() => {\r\n                reject('timeout');\r\n            }, timeoutDelay);\r\n            this._baseIpc.listen(this._ipcOptions.port, this._ipcOptions.host);\r\n        });\r\n        return p;\r\n    }\r\n    stop() {\r\n        if (this._ipcServer) {\r\n            this._ipcBusBrokerClient.off(IpcBusInterfaces.IPCBUS_CHANNEL_QUERY_STATE, this._queryStateLamdba);\r\n            this._ipcBusBrokerClient.off(IpcBusInterfaces.IPCBUS_CHANNEL_SERVICE_AVAILABLE, this._serviceAvailableLambda);\r\n            this._ipcBusBrokerClient.close();\r\n            this._ipcServer.close();\r\n            this._ipcServer = null;\r\n        }\r\n    }\r\n    queryState() {\r\n        let queryStateResult = [];\r\n        this._subscriptions.forEach((connData, channel) => {\r\n            connData.peerIds.forEach((count, peerId) => {\r\n                queryStateResult.push({ channel: channel, peer: this._ipcBusPeers.get(peerId), count: count });\r\n            });\r\n        });\r\n        return queryStateResult;\r\n    }\r\n    isServiceAvailable(serviceName) {\r\n        return this._subscriptions.hasChannel(IpcBusUtils.getServiceCallChannel(serviceName));\r\n    }\r\n    _onQueryState(ipcBusEvent, replyChannel) {\r\n        const queryState = this.queryState();\r\n        if (ipcBusEvent.request) {\r\n            ipcBusEvent.request.resolve(queryState);\r\n        }\r\n        else if (replyChannel != null) {\r\n            this._ipcBusBrokerClient.send(replyChannel, queryState);\r\n        }\r\n    }\r\n    _onServiceAvailable(ipcBusEvent, serviceName) {\r\n        const availability = this.isServiceAvailable(serviceName);\r\n        IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Service '${serviceName}' availability : ${availability}`);\r\n        if (ipcBusEvent.request) {\r\n            ipcBusEvent.request.resolve(availability);\r\n        }\r\n    }\r\n    _onConnection(socket, server) {\r\n        IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Incoming connection !`);\r\n        IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info('[IPCBus:Broker] socket.remotePort=' + socket.remotePort);\r\n        socket.on('error', (err) => {\r\n            IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Error on connection: ${err}`);\r\n        });\r\n    }\r\n    _socketCleanUp(socket) {\r\n        this._subscriptions.releaseConnection(socket.remotePort);\r\n        this._requestChannels.forEach((socketForRequest, channel) => {\r\n            if (socketForRequest.remotePort === socket.remotePort) {\r\n                this._requestChannels.delete(channel);\r\n            }\r\n        });\r\n        IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Connection closed !`);\r\n    }\r\n    _onClose(err, socket, server) {\r\n        this._socketCleanUp(socket);\r\n    }\r\n    _onData(data, socket, server) {\r\n        if (BaseIpc.Cmd.isCmd(data)) {\r\n            switch (data.name) {\r\n                case IpcBusUtils.IPC_BUS_COMMAND_CONNECT:\r\n                    {\r\n                        const ipcBusData = data.args[0];\r\n                        const ipcBusEvent = data.args[1];\r\n                        IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Connect peer #${ipcBusEvent.sender.name}`);\r\n                        this._ipcBusPeers.set(ipcBusData.peerId, ipcBusEvent.sender);\r\n                        break;\r\n                    }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_DISCONNECT: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Unsubscribe all '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name}`);\r\n                    if (this._ipcBusPeers.delete(ipcBusData.peerId)) {\r\n                        this._subscriptions.releasePeerId(socket.remotePort, ipcBusData.peerId);\r\n                    }\r\n                    break;\r\n                }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_CLOSE:\r\n                    {\r\n                        const ipcBusEvent = data.args[1];\r\n                        IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Close peer #${ipcBusEvent.sender.name}`);\r\n                        this._socketCleanUp(socket);\r\n                        break;\r\n                    }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Subscribe to channel '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name}`);\r\n                    this._subscriptions.addRef(ipcBusEvent.channel, socket.remotePort, socket, ipcBusData.peerId);\r\n                    break;\r\n                }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_UNSUBSCRIBE_CHANNEL: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Unsubscribe from channel '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name}`);\r\n                    if (ipcBusData.unsubscribeAll) {\r\n                        this._subscriptions.releaseAll(ipcBusEvent.channel, socket.remotePort, ipcBusData.peerId);\r\n                    }\r\n                    else {\r\n                        this._subscriptions.release(ipcBusEvent.channel, socket.remotePort, ipcBusData.peerId);\r\n                    }\r\n                    break;\r\n                }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_UNSUBSCRIBE_ALL: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Unsubscribe all '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name}`);\r\n                    this._subscriptions.releasePeerId(socket.remotePort, ipcBusData.peerId);\r\n                    break;\r\n                }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_SENDMESSAGE: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Received send on channel '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name}`);\r\n                    this._subscriptions.forEachChannel(ipcBusEvent.channel, function (connData, channel) {\r\n                        BaseIpc.Cmd.exec(IpcBusUtils.IPC_BUS_EVENT_SENDMESSAGE, ipcBusData, ipcBusEvent, data.args[2], connData.conn);\r\n                    });\r\n                    break;\r\n                }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_REQUESTMESSAGE: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Received request on channel '${ipcBusEvent.channel}' (reply = '${ipcBusData.replyChannel}') from peer #${ipcBusEvent.sender.name}`);\r\n                    this._requestChannels.set(ipcBusData.replyChannel, socket);\r\n                    this._subscriptions.forEachChannel(ipcBusEvent.channel, function (connData, channel) {\r\n                        BaseIpc.Cmd.exec(IpcBusUtils.IPC_BUS_EVENT_REQUESTMESSAGE, ipcBusData, ipcBusEvent, data.args[2], connData.conn);\r\n                    });\r\n                    break;\r\n                }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_REQUESTRESPONSE: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Received response request on channel '${ipcBusEvent.channel}' (reply = '${ipcBusData.replyChannel}') from peer #${ipcBusEvent.sender.name}`);\r\n                    let socket = this._requestChannels.get(ipcBusData.replyChannel);\r\n                    if (socket) {\r\n                        this._requestChannels.delete(ipcBusData.replyChannel);\r\n                        BaseIpc.Cmd.exec(IpcBusUtils.IPC_BUS_EVENT_REQUESTRESPONSE, ipcBusData, ipcBusEvent, data.args[2], socket);\r\n                    }\r\n                    break;\r\n                }\r\n                case IpcBusUtils.IPC_BUS_COMMAND_REQUESTCANCEL: {\r\n                    const ipcBusData = data.args[0];\r\n                    const ipcBusEvent = data.args[1];\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Broker] Received cancel request on channel '${ipcBusEvent.channel}' (reply = '${ipcBusData.replyChannel}') from peer #${ipcBusEvent.sender.name}`);\r\n                    this._requestChannels.delete(ipcBusData.replyChannel);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.IpcBusBrokerImpl = IpcBusBrokerImpl;\r\n//# sourceMappingURL=IpcBusBrokerImpl.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusBrokerImpl.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusBrokerImpl.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nconst events_1 = require(\"events\");\r\nclass IpcBusCommonClient extends events_1.EventEmitter {\r\n    constructor(ipcBusTransport) {\r\n        super();\r\n        this._ipcBusTransport = ipcBusTransport;\r\n        this._ipcBusTransport.eventEmitter = this;\r\n    }\r\n    get peer() {\r\n        return this._ipcBusTransport.peer;\r\n    }\r\n    connect(timeoutDelayOrPeerName, peerName) {\r\n        let timeoutDelay = IpcBusUtils.IPC_BUS_TIMEOUT;\r\n        if ((typeof timeoutDelayOrPeerName === 'number') && (timeoutDelayOrPeerName > 0)) {\r\n            timeoutDelay = timeoutDelayOrPeerName;\r\n        }\r\n        else if (typeof timeoutDelayOrPeerName === 'string') {\r\n            peerName = timeoutDelayOrPeerName;\r\n        }\r\n        return this._ipcBusTransport.ipcConnect(timeoutDelay, peerName);\r\n    }\r\n    close() {\r\n        super.removeAllListeners();\r\n        this._ipcBusTransport.ipcClose();\r\n    }\r\n    send(channel, ...args) {\r\n        this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_SENDMESSAGE, {}, channel, args);\r\n    }\r\n    request(timeoutDelayOrChannel, ...args) {\r\n        if (typeof timeoutDelayOrChannel === 'number') {\r\n            return this._ipcBusTransport.request(timeoutDelayOrChannel, args[0], args.slice(1));\r\n        }\r\n        else {\r\n            return this._ipcBusTransport.request(null, timeoutDelayOrChannel, args);\r\n        }\r\n    }\r\n    addListener(channel, listener) {\r\n        super.addListener(channel, listener);\r\n        this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL, {}, channel);\r\n        return this;\r\n    }\r\n    removeListener(channel, listener) {\r\n        super.removeListener(channel, listener);\r\n        this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_UNSUBSCRIBE_CHANNEL, {}, channel);\r\n        return this;\r\n    }\r\n    on(channel, listener) {\r\n        return this.addListener(channel, listener);\r\n    }\r\n    once(channel, listener) {\r\n        super.once(channel, listener);\r\n        this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL, {}, channel);\r\n        return this;\r\n    }\r\n    off(channel, listener) {\r\n        return this.removeListener(channel, listener);\r\n    }\r\n    removeAllListeners(channel) {\r\n        if (channel) {\r\n            this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_UNSUBSCRIBE_CHANNEL, { unsubscribeAll: true }, channel);\r\n        }\r\n        else {\r\n            this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_UNSUBSCRIBE_ALL, {}, '');\r\n        }\r\n        super.removeAllListeners(channel);\r\n        return this;\r\n    }\r\n    prependListener(channel, listener) {\r\n        super.prependListener(channel, listener);\r\n        this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL, {}, channel);\r\n        return this;\r\n    }\r\n    prependOnceListener(channel, listener) {\r\n        super.prependOnceListener(channel, listener);\r\n        this._ipcBusTransport.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL, {}, channel);\r\n        return this;\r\n    }\r\n}\r\nexports.IpcBusCommonClient = IpcBusCommonClient;\r\n//# sourceMappingURL=IpcBusClient.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusClient.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusClient.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IPCBUS_SERVICE_CALL_GETSTATUS = '__getServiceStatus';\r\nexports.IPCBUS_CHANNEL_QUERY_STATE = '/electron-ipc-bus/queryState';\r\nexports.IPCBUS_CHANNEL_SERVICE_AVAILABLE = '/electron-ipc-bus/serviceAvailable';\r\nexports.IPCBUS_SERVICE_EVENT_START = 'service-event-start';\r\nexports.IPCBUS_SERVICE_EVENT_STOP = 'service-event-stop';\r\nexports.IPCBUS_SERVICE_WRAPPER_EVENT = 'service-wrapper-event';\r\nclass ServiceStatus {\r\n    constructor(started, callHandlers, supportEventEmitter) {\r\n        this.started = started;\r\n        this.callHandlers = callHandlers;\r\n        this.supportEventEmitter = supportEventEmitter;\r\n    }\r\n}\r\nexports.ServiceStatus = ServiceStatus;\r\n//# sourceMappingURL=IpcBusInterfaces.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusInterfaces.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusInterfaces.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst IpcBusInterfaces = require(\"./IpcBusInterfaces\");\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nclass IpcBusServiceImpl {\r\n    constructor(_ipcBusClient, _serviceName, _exposedInstance = undefined) {\r\n        this._ipcBusClient = _ipcBusClient;\r\n        this._serviceName = _serviceName;\r\n        this._exposedInstance = _exposedInstance;\r\n        this._callReceivedLamdba = (event, ...args) => this._onCallReceived(event, args[0]);\r\n        this._prevImplEmit = null;\r\n        this._callHandlers = new Map();\r\n        this.registerCallHandler(IpcBusInterfaces.IPCBUS_SERVICE_CALL_GETSTATUS, (call, sender, request) => {\r\n            request.resolve(new IpcBusInterfaces.ServiceStatus(true, this._getCallHandlerNames(), (this._prevImplEmit != null)));\r\n        });\r\n        if (this._exposedInstance) {\r\n            for (let memberName in this._exposedInstance) {\r\n                const method = this._exposedInstance[memberName];\r\n                if ((typeof method === 'function')\r\n                    && this._isFunctionVisible(memberName)) {\r\n                    this.registerCallHandler(memberName, (call, sender, request) => this._doCall(call, sender, request));\r\n                }\r\n            }\r\n            for (let memberName of Object.getOwnPropertyNames(Object.getPrototypeOf(this._exposedInstance))) {\r\n                if (!this._callHandlers.has(memberName)) {\r\n                    const method = this._exposedInstance[memberName];\r\n                    if ((method instanceof Function)\r\n                        && this._isFunctionVisible(memberName)) {\r\n                        this.registerCallHandler(memberName, (call, sender, request) => this._doCall(call, sender, request));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' does NOT have an implementation`);\r\n        }\r\n    }\r\n    _isFunctionVisible(memberName) {\r\n        if (IpcBusServiceImpl._hiddenMethods.has(memberName)) {\r\n            return false;\r\n        }\r\n        return (memberName[0] !== '_');\r\n    }\r\n    start() {\r\n        if (this._exposedInstance && this._exposedInstance['emit']) {\r\n            this._prevImplEmit = this._exposedInstance['emit'];\r\n            this._exposedInstance['emit'] = (eventName, ...args) => {\r\n                IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' is emitting event '${eventName}'`);\r\n                this.sendEvent(IpcBusInterfaces.IPCBUS_SERVICE_WRAPPER_EVENT, eventName, args);\r\n                this._prevImplEmit.call(this._exposedInstance, eventName, ...args);\r\n            };\r\n            IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' will send events emitted by its implementation`);\r\n        }\r\n        this._ipcBusClient.addListener(IpcBusUtils.getServiceCallChannel(this._serviceName), this._callReceivedLamdba);\r\n        this.sendEvent(IpcBusInterfaces.IPCBUS_SERVICE_EVENT_START, new IpcBusInterfaces.ServiceStatus(true, this._getCallHandlerNames(), (this._prevImplEmit != null)));\r\n        IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' is STARTED`);\r\n    }\r\n    stop() {\r\n        if (this._exposedInstance && this._prevImplEmit) {\r\n            this._exposedInstance['emit'] = this._prevImplEmit;\r\n            this._prevImplEmit = null;\r\n        }\r\n        this.sendEvent(IpcBusInterfaces.IPCBUS_SERVICE_EVENT_STOP, {});\r\n        this._ipcBusClient.removeListener(IpcBusUtils.getServiceCallChannel(this._serviceName), this._callReceivedLamdba);\r\n        IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' is STOPPED`);\r\n    }\r\n    registerCallHandler(name, handler) {\r\n        this._callHandlers.set(name, handler);\r\n        IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' registered call handler '${name}'`);\r\n    }\r\n    unregisterCallHandler(name) {\r\n        this._callHandlers.delete(name);\r\n        IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' unregistered call handler '${name}'`);\r\n    }\r\n    sendEvent(name, ...args) {\r\n        const eventMsg = { eventName: name, args: args };\r\n        this._ipcBusClient.send(IpcBusUtils.getServiceEventChannel(this._serviceName), eventMsg);\r\n    }\r\n    _onCallReceived(event, msg) {\r\n        let callHandler = this._callHandlers.get(msg.handlerName);\r\n        if (!callHandler) {\r\n            event.request.reject(`Service '${this._serviceName}' does NOT handle calls to '${msg.handlerName}' !`);\r\n            IpcBusUtils.Logger.service && IpcBusUtils.Logger.error(`[IpcService] Service '${this._serviceName}' does NOT handle calls to '${msg.handlerName}' !`);\r\n        }\r\n        else {\r\n            try {\r\n                callHandler(msg, event.sender, event.request);\r\n            }\r\n            catch (e) {\r\n                event.request.reject(e);\r\n                IpcBusUtils.Logger.service && IpcBusUtils.Logger.error(`[IpcService] Service '${this._serviceName}' encountered an exception while processing call to '${msg.handlerName}' : ${e}`);\r\n            }\r\n        }\r\n    }\r\n    _doCall(call, sender, request) {\r\n        IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcService] Service '${this._serviceName}' is calling implementation's '${call.handlerName}'`);\r\n        let callArgs = call.args;\r\n        if (this._exposedInstance['_beforeCallHandler']) {\r\n            callArgs = this._exposedInstance['_beforeCallHandler'](call, sender, request);\r\n        }\r\n        try {\r\n            const result = this._exposedInstance[call.handlerName](...callArgs);\r\n            if (result && result['then']) {\r\n                result.then(request.resolve, request.reject);\r\n            }\r\n            else {\r\n                request.resolve(result);\r\n            }\r\n        }\r\n        catch (e) {\r\n            request.reject(e);\r\n            IpcBusUtils.Logger.service && IpcBusUtils.Logger.error(`[IpcService] Service '${this._serviceName}' encountered an exception while processing call to '${call.handlerName}' : ${e}`);\r\n        }\r\n    }\r\n    _getCallHandlerNames() {\r\n        const callHandlerNames = Array.from(this._callHandlers.keys()).filter((name) => name[0] !== '_');\r\n        return callHandlerNames;\r\n    }\r\n}\r\nIpcBusServiceImpl._hiddenMethods = new Set([\r\n    'constructor',\r\n    'setMaxListeners',\r\n    'getMaxListeners',\r\n    'emit',\r\n    'addListener',\r\n    'on',\r\n    'off',\r\n    'prependListener',\r\n    'once',\r\n    'prependOnceListener',\r\n    'removeListener',\r\n    'removeAllListeners',\r\n    'listeners',\r\n    'listenerCount',\r\n    'eventNames'\r\n]);\r\nexports.IpcBusServiceImpl = IpcBusServiceImpl;\r\n//# sourceMappingURL=IpcBusServiceImpl.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusServiceImpl.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusServiceImpl.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst events_1 = require(\"events\");\r\nconst IpcBusInterfaces = require(\"./IpcBusInterfaces\");\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nclass CallWrapperEventEmitter extends events_1.EventEmitter {\r\n}\r\nclass IpcBusServiceProxyImpl extends events_1.EventEmitter {\r\n    constructor(_ipcBusClient, _serviceName, _callTimeout = 1000) {\r\n        super();\r\n        this._ipcBusClient = _ipcBusClient;\r\n        this._serviceName = _serviceName;\r\n        this._callTimeout = _callTimeout;\r\n        this._eventReceivedLamdba = (event, ...args) => this._onEventReceived(event, args[0]);\r\n        this._delayedCalls = new Array();\r\n        this._wrapper = null;\r\n        this._wrapper = new CallWrapperEventEmitter();\r\n        this._isStarted = false;\r\n        this.getStatus()\r\n            .then((serviceStatus) => {\r\n            if (!this._isStarted && serviceStatus.started) {\r\n                this._onServiceStart(serviceStatus);\r\n            }\r\n        })\r\n            .catch((err) => {\r\n        });\r\n        _ipcBusClient.addListener(IpcBusUtils.getServiceEventChannel(this._serviceName), this._eventReceivedLamdba);\r\n    }\r\n    get isStarted() {\r\n        return this._isStarted;\r\n    }\r\n    get wrapper() {\r\n        return this._wrapper;\r\n    }\r\n    getStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            const statusCallMsg = { handlerName: IpcBusInterfaces.IPCBUS_SERVICE_CALL_GETSTATUS };\r\n            this._ipcBusClient.request(this._callTimeout, IpcBusUtils.getServiceCallChannel(this._serviceName), statusCallMsg)\r\n                .then((res) => {\r\n                const serviceStatus = res.payload;\r\n                IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Service '${this._serviceName}' availability = ${serviceStatus.started}`);\r\n                resolve(serviceStatus);\r\n            })\r\n                .catch((res) => {\r\n                IpcBusUtils.Logger.service && IpcBusUtils.Logger.warn(`[IpcBusServiceProxy] Service '${this._serviceName}' error ${res.err}`);\r\n            });\r\n        });\r\n    }\r\n    call(name, ...args) {\r\n        const callMsg = { handlerName: name, args: args };\r\n        if (this._isStarted) {\r\n            return new Promise((resolve, reject) => {\r\n                this._ipcBusClient\r\n                    .request(this._callTimeout, IpcBusUtils.getServiceCallChannel(this._serviceName), callMsg)\r\n                    .then((res) => resolve(res.payload))\r\n                    .catch((res) => reject(res.err));\r\n            });\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Call to '${name}' from service '${this._serviceName}' delayed as the service is not available`);\r\n                const delayedCall = () => {\r\n                    IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Executing delayed call to '${name}' from service '${this._serviceName}' ...`);\r\n                    this._ipcBusClient\r\n                        .request(this._callTimeout, IpcBusUtils.getServiceCallChannel(this._serviceName), callMsg)\r\n                        .then((res) => resolve(res.payload))\r\n                        .catch((res) => reject(res.err));\r\n                };\r\n                this._delayedCalls.push(delayedCall);\r\n            });\r\n        }\r\n    }\r\n    getWrapper() {\r\n        const typed_wrapper = this._wrapper;\r\n        return typed_wrapper;\r\n    }\r\n    _updateWrapper(serviceStatus) {\r\n        serviceStatus.callHandlers.forEach((handlerName) => {\r\n            const proc = (...args) => {\r\n                return this.call(handlerName, ...args);\r\n            };\r\n            this._wrapper[handlerName] = proc;\r\n            IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Service '${this._serviceName}' added '${handlerName}' to its wrapper`);\r\n        });\r\n    }\r\n    _sendDelayedCalls() {\r\n        this._delayedCalls.forEach((delayedCall) => {\r\n            delayedCall();\r\n        });\r\n        this._delayedCalls.splice(0, this._delayedCalls.length);\r\n    }\r\n    _onEventReceived(event, msg) {\r\n        if (msg.eventName === IpcBusInterfaces.IPCBUS_SERVICE_WRAPPER_EVENT) {\r\n            IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Wrapper '${this._serviceName}' receive event '${msg.args[0]}'`);\r\n            this._wrapper.emit(msg.args[0], ...msg.args[1]);\r\n        }\r\n        else {\r\n            IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Service '${this._serviceName}' receive event '${msg.eventName}'`);\r\n            switch (msg.eventName) {\r\n                case IpcBusInterfaces.IPCBUS_SERVICE_EVENT_START:\r\n                    this._onServiceStart(msg.args[0]);\r\n                    break;\r\n                case IpcBusInterfaces.IPCBUS_SERVICE_EVENT_STOP:\r\n                    this._onServiceStop();\r\n                    break;\r\n                default:\r\n                    this.emit(msg.eventName, ...msg.args);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    _onServiceStart(serviceStatus) {\r\n        this._isStarted = serviceStatus.started;\r\n        IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Service '${this._serviceName}' is STARTED`);\r\n        this._updateWrapper(serviceStatus);\r\n        this.emit(IpcBusInterfaces.IPCBUS_SERVICE_EVENT_START, serviceStatus);\r\n        this._sendDelayedCalls();\r\n    }\r\n    _onServiceStop() {\r\n        this._isStarted = false;\r\n        IpcBusUtils.Logger.service && IpcBusUtils.Logger.info(`[IpcBusServiceProxy] Service '${this._serviceName}' is STOPPED`);\r\n        this.emit(IpcBusInterfaces.IPCBUS_SERVICE_EVENT_STOP);\r\n    }\r\n}\r\nexports.IpcBusServiceProxyImpl = IpcBusServiceProxyImpl;\r\n//# sourceMappingURL=IpcBusServiceProxyImpl.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusServiceProxyImpl.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusServiceProxyImpl.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nconst uuid = require(\"uuid\");\r\nfunction GenerateReplyChannel() {\r\n    return '/electron-ipc-bus/request-reply/' + uuid.v1();\r\n}\r\nclass IpcBusData {\r\n}\r\nexports.IpcBusData = IpcBusData;\r\nclass IpcBusTransport {\r\n    constructor(ipcBusProcess, ipcOptions) {\r\n        this._ipcBusPeer = { name: '', process: ipcBusProcess };\r\n        this.ipcOptions = ipcOptions;\r\n        this._peerId = uuid.v1();\r\n        this._requestFunctions = new Map();\r\n    }\r\n    get peer() {\r\n        return this._ipcBusPeer;\r\n    }\r\n    _onEventReceived(name, ipcBusData, ipcBusEvent, args) {\r\n        switch (name) {\r\n            case IpcBusUtils.IPC_BUS_EVENT_SENDMESSAGE: {\r\n                IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] Emit message received on channel '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name}`);\r\n                this.eventEmitter.emit(ipcBusEvent.channel, ipcBusEvent, ...args);\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_EVENT_REQUESTMESSAGE: {\r\n                IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] Emit request received on channel '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name} (replyChannel '${ipcBusData.replyChannel}')`);\r\n                ipcBusEvent.request = {\r\n                    resolve: (payload) => {\r\n                        ipcBusData.resolve = true;\r\n                        this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_REQUESTRESPONSE, ipcBusData, ipcBusData.replyChannel, [payload]);\r\n                    },\r\n                    reject: (err) => {\r\n                        ipcBusData.reject = true;\r\n                        this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_REQUESTRESPONSE, ipcBusData, ipcBusData.replyChannel, [err]);\r\n                    }\r\n                };\r\n                this.eventEmitter.emit(ipcBusEvent.channel, ipcBusEvent, ...args);\r\n                break;\r\n            }\r\n            case IpcBusUtils.IPC_BUS_EVENT_REQUESTRESPONSE: {\r\n                IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] Emit request response received on channel '${ipcBusEvent.channel}' from peer #${ipcBusEvent.sender.name} (replyChannel '${ipcBusData.replyChannel}')`);\r\n                let localRequestCallback = this._requestFunctions.get(ipcBusData.replyChannel);\r\n                if (localRequestCallback) {\r\n                    localRequestCallback(ipcBusData, ipcBusEvent, ...args);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    request(timeoutDelay, channel, args) {\r\n        if ((timeoutDelay == null) || (timeoutDelay <= 0)) {\r\n            timeoutDelay = IpcBusUtils.IPC_BUS_TIMEOUT;\r\n        }\r\n        let p = new Promise((resolve, reject) => {\r\n            const ipcBusData = { replyChannel: GenerateReplyChannel() };\r\n            const localRequestCallback = (localIpcBusData, localIpcBusEvent, responsePromise) => {\r\n                IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] Peer #${localIpcBusEvent.sender.name} replied to request on ${ipcBusData.replyChannel}`);\r\n                this._requestFunctions.delete(ipcBusData.replyChannel);\r\n                localIpcBusEvent.channel = channel;\r\n                if (localIpcBusData.resolve) {\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] resolve`);\r\n                    let response = { event: localIpcBusEvent, payload: responsePromise };\r\n                    resolve(response);\r\n                }\r\n                else if (localIpcBusData.reject) {\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] reject`);\r\n                    let response = { event: localIpcBusEvent, err: responsePromise };\r\n                    reject(response);\r\n                }\r\n                else {\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] reject: unknown format`);\r\n                    let response = { event: localIpcBusEvent, err: 'unknown format' };\r\n                    reject(response);\r\n                }\r\n            };\r\n            this._requestFunctions.set(ipcBusData.replyChannel, localRequestCallback);\r\n            this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_REQUESTMESSAGE, ipcBusData, channel, args);\r\n            setTimeout(() => {\r\n                if (this._requestFunctions.delete(ipcBusData.replyChannel)) {\r\n                    this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_REQUESTCANCEL, ipcBusData, channel);\r\n                    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IpcBusClient] reject: timeout`);\r\n                    let response = { event: { channel: channel, sender: this._ipcBusPeer }, err: 'timeout' };\r\n                    reject(response);\r\n                }\r\n            }, timeoutDelay);\r\n        });\r\n        return p;\r\n    }\r\n    ipcConnect(timeoutDelay, peerName) {\r\n        let p = new Promise((resolve, reject) => {\r\n            if (peerName == null) {\r\n                peerName = `${this._ipcBusPeer.process.type}_${this._ipcBusPeer.process.pid}`;\r\n            }\r\n            this._ipcBusPeer.name = peerName;\r\n            resolve('connected');\r\n        });\r\n        return p;\r\n    }\r\n}\r\nexports.IpcBusTransport = IpcBusTransport;\r\nconst IpcBusTransportNode_1 = require(\"./IpcBusTransportNode\");\r\nconst IpcBusTransportRenderer_1 = require(\"./IpcBusTransportRenderer\");\r\nconst ElectronUtils = require(\"./ElectronUtils\");\r\nfunction CreateIpcBusTransport(ipcOptions) {\r\n    let processType = ElectronUtils.GuessElectronProcessType();\r\n    IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`CreateIpcBusForProcess process type = ${processType}, ipc options = ${ipcOptions}`);\r\n    let ipcBusTransport = null;\r\n    switch (processType) {\r\n        case 'renderer':\r\n            ipcBusTransport = new IpcBusTransportRenderer_1.IpcBusTransportRenderer({ type: processType, pid: -1 }, ipcOptions);\r\n            break;\r\n        case 'browser':\r\n        case 'node':\r\n            if (ipcOptions.isValid()) {\r\n                ipcBusTransport = new IpcBusTransportNode_1.IpcBusTransportNode({ type: processType, pid: process.pid }, ipcOptions);\r\n            }\r\n            break;\r\n    }\r\n    return ipcBusTransport;\r\n}\r\nexports.CreateIpcBusTransport = CreateIpcBusTransport;\r\n//# sourceMappingURL=IpcBusTransport.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransport.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransport.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nconst BaseIpc = require(\"easy-ipc\");\r\nconst IpcBusTransport_1 = require(\"./IpcBusTransport\");\r\nclass IpcBusTransportNode extends IpcBusTransport_1.IpcBusTransport {\r\n    constructor(ipcBusProcess, ipcOptions) {\r\n        super(ipcBusProcess, ipcOptions);\r\n        this._baseIpc = new BaseIpc();\r\n        this._baseIpc.on('data', (data) => {\r\n            if (BaseIpc.Cmd.isCmd(data)) {\r\n                this._onEventReceived(data.name, data.args[0], data.args[1], data.args[2]);\r\n            }\r\n        });\r\n    }\r\n    ipcConnect(timeoutDelay, peerName) {\r\n        let p = new Promise((resolve, reject) => {\r\n            super.ipcConnect(timeoutDelay, peerName)\r\n                .then((msg) => {\r\n                this._baseIpc.on('connect', (conn) => {\r\n                    this._busConn = conn;\r\n                    this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_CONNECT, {}, '');\r\n                    resolve(msg);\r\n                });\r\n                setTimeout(() => {\r\n                    reject('timeout');\r\n                }, timeoutDelay);\r\n                this._baseIpc.connect(this.ipcOptions.port, this.ipcOptions.host);\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n        return p;\r\n    }\r\n    ipcClose() {\r\n        this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_CLOSE, {}, '');\r\n        this._busConn.end();\r\n        this._busConn = null;\r\n    }\r\n    ipcPushCommand(command, ipcBusData, channel, args) {\r\n        ipcBusData.peerId = this._peerId;\r\n        this._ipcPushCommand(command, ipcBusData, { channel: channel, sender: this.peer }, args);\r\n    }\r\n    _ipcPushCommand(command, ipcBusData, ipcBusEvent, args) {\r\n        if (args) {\r\n            BaseIpc.Cmd.exec(command, ipcBusData, ipcBusEvent, args, this._busConn);\r\n        }\r\n        else {\r\n            BaseIpc.Cmd.exec(command, ipcBusData, ipcBusEvent, this._busConn);\r\n        }\r\n    }\r\n}\r\nexports.IpcBusTransportNode = IpcBusTransportNode;\r\n//# sourceMappingURL=IpcBusTransportNode.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransportNode.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransportNode.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst IpcBusUtils = require(\"./IpcBusUtils\");\r\nconst IpcBusTransport_1 = require(\"./IpcBusTransport\");\r\nclass IpcBusTransportRenderer extends IpcBusTransport_1.IpcBusTransport {\r\n    constructor(ipcBusProcess, ipcOptions) {\r\n        super(ipcBusProcess, ipcOptions);\r\n    }\r\n    ;\r\n    _onHandshake(eventOrPid, pidOrUndefined) {\r\n        if (pidOrUndefined) {\r\n            this._ipcBusPeer.process.pid = pidOrUndefined;\r\n            IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Renderer] Activate Standard listening for #${this._ipcBusPeer.name}`);\r\n            this._onIpcEventReceived = (eventEmitter, name, ipcBusData, ipcBusEvent, args) => this._onEventReceived(name, ipcBusData, ipcBusEvent, args);\r\n        }\r\n        else {\r\n            this._ipcBusPeer.process.pid = eventOrPid;\r\n            IpcBusUtils.Logger.enable && IpcBusUtils.Logger.info(`[IPCBus:Renderer] Activate Sandbox listening for #${this._ipcBusPeer.name}`);\r\n            this._onIpcEventReceived = (name, ipcBusData, ipcBusEvent, args) => this._onEventReceived(name, ipcBusData, ipcBusEvent, args);\r\n        }\r\n        this._ipcRenderer.addListener(IpcBusUtils.IPC_BUS_RENDERER_EVENT, this._onIpcEventReceived);\r\n    }\r\n    ;\r\n    _ipcConnect(timeoutDelay, peerName) {\r\n        let p = new Promise((resolve, reject) => {\r\n            super.ipcConnect(timeoutDelay, peerName)\r\n                .then((msg) => {\r\n                this._ipcRenderer.once(IpcBusUtils.IPC_BUS_COMMAND_CONNECT, () => {\r\n                    resolve('connected');\r\n                });\r\n                setTimeout(() => {\r\n                    reject('timeout');\r\n                }, timeoutDelay);\r\n                this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_CONNECT, {}, '');\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n        return p;\r\n    }\r\n    ipcConnect(timeoutDelay, peerName) {\r\n        if (this._ipcRenderer) {\r\n            return this._ipcConnect(timeoutDelay, peerName);\r\n        }\r\n        else {\r\n            let p = new Promise((resolve, reject) => {\r\n                this._ipcRenderer = require('electron').ipcRenderer;\r\n                this._ipcRenderer.once(IpcBusUtils.IPC_BUS_RENDERER_HANDSHAKE, (eventOrPid, pidOrUndefined) => {\r\n                    this._onHandshake(eventOrPid, pidOrUndefined);\r\n                    this._ipcConnect(timeoutDelay, peerName)\r\n                        .then((msg) => {\r\n                        resolve(msg);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                });\r\n                setTimeout(() => {\r\n                    reject('timeout');\r\n                }, timeoutDelay);\r\n                this._ipcRenderer.send(IpcBusUtils.IPC_BUS_RENDERER_HANDSHAKE, this._peerId);\r\n            });\r\n            return p;\r\n        }\r\n    }\r\n    ipcClose() {\r\n        if (this._ipcRenderer) {\r\n            this.ipcPushCommand(IpcBusUtils.IPC_BUS_COMMAND_CLOSE, {}, '');\r\n            this._ipcRenderer.removeListener(IpcBusUtils.IPC_BUS_RENDERER_EVENT, this._onIpcEventReceived);\r\n            this._ipcRenderer = null;\r\n        }\r\n    }\r\n    ipcPushCommand(command, ipcBusData, channel, args) {\r\n        ipcBusData.peerId = this._peerId;\r\n        this._ipcRenderer.send(IpcBusUtils.IPC_BUS_RENDERER_COMMAND, command, ipcBusData, { channel: channel, sender: this.peer }, args);\r\n    }\r\n}\r\nexports.IpcBusTransportRenderer = IpcBusTransportRenderer;\r\n//# sourceMappingURL=IpcBusTransportRenderer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransportRenderer.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusTransportRenderer.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IPC_BUS_RENDERER_HANDSHAKE = 'IpcBusRenderer:Handshake';\r\nexports.IPC_BUS_RENDERER_CONNECT = 'IpcBusRenderer:Connect';\r\nexports.IPC_BUS_RENDERER_COMMAND = 'IpcBusRenderer:Command';\r\nexports.IPC_BUS_RENDERER_EVENT = 'IpcBusRenderer:Event';\r\nexports.IPC_BUS_COMMAND_CONNECT = 'IpcBusCommand:connect';\r\nexports.IPC_BUS_COMMAND_DISCONNECT = 'IpcBusCommand:disconnect';\r\nexports.IPC_BUS_COMMAND_CLOSE = 'IpcBusCommand:close';\r\nexports.IPC_BUS_COMMAND_SUBSCRIBE_CHANNEL = 'IpcBusCommand:subscribeChannel';\r\nexports.IPC_BUS_COMMAND_UNSUBSCRIBE_CHANNEL = 'IpcBusCommand:unsubscribeChannel';\r\nexports.IPC_BUS_COMMAND_UNSUBSCRIBE_ALL = 'IpcBusCommand:unsubscribeAll';\r\nexports.IPC_BUS_COMMAND_SENDMESSAGE = 'IpcBusCommand:sendMessage';\r\nexports.IPC_BUS_COMMAND_REQUESTMESSAGE = 'IpcBusCommand:requestMessage';\r\nexports.IPC_BUS_COMMAND_REQUESTRESPONSE = 'IpcBusCommand:requestResponse';\r\nexports.IPC_BUS_COMMAND_REQUESTCANCEL = 'IpcBusCommand:requestCancel';\r\nexports.IPC_BUS_EVENT_SENDMESSAGE = 'IpcBusEvent:onSendMessage';\r\nexports.IPC_BUS_EVENT_REQUESTMESSAGE = 'IpcBusEvent:onRequestMessage';\r\nexports.IPC_BUS_EVENT_REQUESTRESPONSE = 'IpcBusEvent:onRequestResponse';\r\nexports.IPC_BUS_TIMEOUT = 2000;\r\nfunction GetCmdLineArgValue(argName) {\r\n    for (let i = 0; i < process.argv.length; ++i) {\r\n        if (process.argv[i].startsWith('--' + argName)) {\r\n            const argValue = process.argv[i].split('=')[1];\r\n            return argValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nclass IpcOptions {\r\n    isValid() {\r\n        return (this.port != null);\r\n    }\r\n}\r\nexports.IpcOptions = IpcOptions;\r\n;\r\nfunction ExtractIpcOptions(busPath) {\r\n    let ipcOptions = new IpcOptions();\r\n    if (busPath == null) {\r\n        busPath = GetCmdLineArgValue('bus-path');\r\n    }\r\n    if (busPath != null) {\r\n        if (typeof busPath === 'number') {\r\n            ipcOptions.port = busPath;\r\n        }\r\n        else if (typeof busPath === 'string') {\r\n            let parts = busPath.split(':');\r\n            if (parts.length === 1) {\r\n                ipcOptions.port = parts[0];\r\n            }\r\n            else if (parts.length === 2) {\r\n                ipcOptions.host = parts[0];\r\n                ipcOptions.port = parts[1];\r\n            }\r\n        }\r\n    }\r\n    return ipcOptions;\r\n}\r\nexports.ExtractIpcOptions = ExtractIpcOptions;\r\nfunction getServiceNamespace(serviceName) {\r\n    return `/electron-ipc-bus/ipc-service/${serviceName}`;\r\n}\r\nexports.getServiceNamespace = getServiceNamespace;\r\nfunction getServiceCallChannel(serviceName) {\r\n    return getServiceNamespace(serviceName) + '/call';\r\n}\r\nexports.getServiceCallChannel = getServiceCallChannel;\r\nfunction getServiceEventChannel(serviceName) {\r\n    return getServiceNamespace(serviceName) + '/event';\r\n}\r\nexports.getServiceEventChannel = getServiceEventChannel;\r\nclass Logger {\r\n    static info(msg) {\r\n        console.log(msg);\r\n    }\r\n    static warn(msg) {\r\n        console.warn(msg);\r\n    }\r\n    static error(msg) {\r\n        console.error(msg);\r\n    }\r\n}\r\nLogger.enable = false;\r\nLogger.service = false;\r\nexports.Logger = Logger;\r\n;\r\nclass ChannelConnectionMap {\r\n    constructor(name) {\r\n        this._name = name;\r\n        this._channelsMap = new Map();\r\n    }\r\n    _info(str) {\r\n        Logger.info(`[${this._name}] ${str}`);\r\n    }\r\n    _warn(str) {\r\n        Logger.warn(`[${this._name}] ${str}`);\r\n    }\r\n    _error(str) {\r\n        Logger.error(`[${this._name}] ${str}`);\r\n    }\r\n    hasChannel(channel) {\r\n        return this._channelsMap.has(channel);\r\n    }\r\n    addRef(channel, connKey, conn, peerId, callback) {\r\n        Logger.enable && this._info(`AddRef: '${channel}', connKey = ${connKey}`);\r\n        let connsMap = this._channelsMap.get(channel);\r\n        if (connsMap == null) {\r\n            connsMap = new Map();\r\n            this._channelsMap.set(channel, connsMap);\r\n        }\r\n        let connData = connsMap.get(connKey);\r\n        if (connData == null) {\r\n            connData = new ChannelConnectionMap.ConnectionData(connKey, conn);\r\n            connsMap.set(connKey, connData);\r\n        }\r\n        let count = connData.peerIds.get(peerId);\r\n        if (count == null) {\r\n            count = 1;\r\n        }\r\n        else {\r\n            ++count;\r\n        }\r\n        connData.peerIds.set(peerId, count);\r\n        Logger.enable && this._info(`AddRef: '${channel}', connKey = ${connKey}, count = ${connData.peerIds.size}`);\r\n        if ((callback instanceof Function) === true) {\r\n            callback(channel, peerId, connData);\r\n        }\r\n    }\r\n    _release(all, channel, connKey, peerId, callback) {\r\n        Logger.enable && this._info(`Release: '${channel}', connKey = ${connKey}`);\r\n        let connsMap = this._channelsMap.get(channel);\r\n        if (connsMap == null) {\r\n            Logger.enable && this._warn(`Release: '${channel}' is unknown`);\r\n        }\r\n        else {\r\n            let connData = connsMap.get(connKey);\r\n            if (connData == null) {\r\n                Logger.enable && this._warn(`Release: connKey = ${connKey} is unknown`);\r\n            }\r\n            else {\r\n                if (peerId == null) {\r\n                    if ((callback instanceof Function) === true) {\r\n                        connData.peerIds.forEach((count, peerId) => {\r\n                            connData.peerIds.delete(peerId);\r\n                            callback(channel, peerId, connData);\r\n                        });\r\n                    }\r\n                    else {\r\n                        connData.peerIds.clear();\r\n                    }\r\n                }\r\n                else {\r\n                    let count = connData.peerIds.get(peerId);\r\n                    if (count == null) {\r\n                        Logger.enable && this._warn(`Release: peerId #${peerId} is unknown`);\r\n                    }\r\n                    else {\r\n                        if (all) {\r\n                            if ((callback instanceof Function) === true) {\r\n                                while (count > 0) {\r\n                                    --count;\r\n                                    connData.peerIds.set(peerId, count);\r\n                                    if ((callback instanceof Function) === true) {\r\n                                        callback(channel, peerId, connData);\r\n                                    }\r\n                                }\r\n                            }\r\n                            connData.peerIds.delete(peerId);\r\n                        }\r\n                        else {\r\n                            --count;\r\n                            if (count > 0) {\r\n                                connData.peerIds.set(peerId, count);\r\n                            }\r\n                            else {\r\n                                connData.peerIds.delete(peerId);\r\n                            }\r\n                            if ((callback instanceof Function) === true) {\r\n                                callback(channel, peerId, connData);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (connData.peerIds.size === 0) {\r\n                    connsMap.delete(connKey);\r\n                    if (connsMap.size === 0) {\r\n                        this._channelsMap.delete(channel);\r\n                    }\r\n                }\r\n                Logger.enable && this._info(`Release: '${channel}', connKey = ${connKey}, count = ${connData.peerIds.size}`);\r\n            }\r\n        }\r\n    }\r\n    release(channel, connKey, peerId, callback) {\r\n        this._release(false, channel, connKey, peerId, callback);\r\n    }\r\n    releaseAll(channel, connKey, peerId, callback) {\r\n        Logger.enable && this._info(`releaseAll: connKey = ${connKey}`);\r\n        this._release(true, channel, connKey, peerId, callback);\r\n    }\r\n    releasePeerId(connKey, peerId, callback) {\r\n        Logger.enable && this._info(`releasePeerId: peerId = ${peerId}`);\r\n        this._channelsMap.forEach((connsMap, channel) => {\r\n            this._release(true, channel, connKey, peerId, callback);\r\n        });\r\n    }\r\n    releaseConnection(connKey, callback) {\r\n        Logger.enable && this._info(`ReleaseConn: connKey = ${connKey}`);\r\n        this._channelsMap.forEach((connsMap, channel) => {\r\n            this._release(false, channel, connKey, null, callback);\r\n        });\r\n    }\r\n    forEachChannel(channel, callback) {\r\n        Logger.enable && this._info(`forEachChannel: '${channel}'`);\r\n        if ((callback instanceof Function) === false) {\r\n            Logger.enable && this._error('forEachChannel: No callback provided !');\r\n            return;\r\n        }\r\n        let connsMap = this._channelsMap.get(channel);\r\n        if (connsMap == null) {\r\n            Logger.enable && this._warn(`forEachChannel: Unknown channel '${channel}' !`);\r\n        }\r\n        else {\r\n            connsMap.forEach((connData, connKey) => {\r\n                Logger.enable && this._info(`forEachChannel: '${channel}', connKey = ${connKey} (${connData.peerIds.size})`);\r\n                callback(connData, channel);\r\n            });\r\n        }\r\n    }\r\n    forEach(callback) {\r\n        Logger.enable && this._info('forEach');\r\n        if ((callback instanceof Function) === false) {\r\n            Logger.enable && this._error('forEach: No callback provided !');\r\n            return;\r\n        }\r\n        this._channelsMap.forEach((connsMap, channel) => {\r\n            connsMap.forEach((connData, connKey) => {\r\n                Logger.enable && this._info(`forEach: '${channel}', connKey = ${connKey} (${connData.peerIds.size})`);\r\n                callback(connData, channel);\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.ChannelConnectionMap = ChannelConnectionMap;\r\n(function (ChannelConnectionMap) {\r\n    class ConnectionData {\r\n        constructor(connKey, conn) {\r\n            this.peerIds = new Map();\r\n            this.connKey = connKey;\r\n            this.conn = conn;\r\n        }\r\n    }\r\n    ChannelConnectionMap.ConnectionData = ConnectionData;\r\n    ;\r\n    ;\r\n})(ChannelConnectionMap = exports.ChannelConnectionMap || (exports.ChannelConnectionMap = {}));\r\n;\r\n//# sourceMappingURL=IpcBusUtils.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusUtils.js\n// module id = ./node_modules/electron-ipc-bus/lib/IpcBus/IpcBusUtils.js\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar IpcBusInterfaces_1 = require(\"./IpcBus/IpcBusInterfaces\");\r\nexports.IPCBUS_CHANNEL_QUERY_STATE = IpcBusInterfaces_1.IPCBUS_CHANNEL_QUERY_STATE;\r\nvar IpcBusInterfaces_2 = require(\"./IpcBus/IpcBusInterfaces\");\r\nexports.IPCBUS_CHANNEL_SERVICE_AVAILABLE = IpcBusInterfaces_2.IPCBUS_CHANNEL_SERVICE_AVAILABLE;\r\nvar IpcBusInterfaces_3 = require(\"./IpcBus/IpcBusInterfaces\");\r\nexports.IPCBUS_SERVICE_EVENT_START = IpcBusInterfaces_3.IPCBUS_SERVICE_EVENT_START;\r\nvar IpcBusInterfaces_4 = require(\"./IpcBus/IpcBusInterfaces\");\r\nexports.IPCBUS_SERVICE_EVENT_STOP = IpcBusInterfaces_4.IPCBUS_SERVICE_EVENT_STOP;\r\nvar IpcBusInterfaces_5 = require(\"./IpcBus/IpcBusInterfaces\");\r\nexports.ServiceStatus = IpcBusInterfaces_5.ServiceStatus;\r\nconst IpcBusApi_1 = require(\"./IpcBus/IpcBusApi\");\r\nconst IpcBusApi_2 = require(\"./IpcBus/IpcBusApi\");\r\nconst IpcBusApi_3 = require(\"./IpcBus/IpcBusApi\");\r\nconst IpcBusApi_4 = require(\"./IpcBus/IpcBusApi\");\r\nconst IpcBusApi_5 = require(\"./IpcBus/IpcBusApi\");\r\nconst IpcBusApi_6 = require(\"./IpcBus/IpcBusApi\");\r\nconst IpcBusApi_7 = require(\"./IpcBus/IpcBusApi\");\r\nfunction CreateIpcBusBroker(busPath) {\r\n    return IpcBusApi_1._CreateIpcBusBroker(busPath);\r\n}\r\nexports.CreateIpcBusBroker = CreateIpcBusBroker;\r\nfunction CreateIpcBusBridge(busPath) {\r\n    return IpcBusApi_2._CreateIpcBusBridge(busPath);\r\n}\r\nexports.CreateIpcBusBridge = CreateIpcBusBridge;\r\nfunction CreateIpcBusClient(busPath) {\r\n    return IpcBusApi_3._CreateIpcBusClient(busPath);\r\n}\r\nexports.CreateIpcBusClient = CreateIpcBusClient;\r\nfunction CreateIpcBusService(client, serviceName, serviceImpl = undefined) {\r\n    return IpcBusApi_4._CreateIpcBusService(client, serviceName, serviceImpl);\r\n}\r\nexports.CreateIpcBusService = CreateIpcBusService;\r\nfunction CreateIpcBusServiceProxy(client, serviceName, callTimeout = 1000) {\r\n    return IpcBusApi_5._CreateIpcBusServiceProxy(client, serviceName, callTimeout);\r\n}\r\nexports.CreateIpcBusServiceProxy = CreateIpcBusServiceProxy;\r\nfunction ActivateIpcBusTrace(enable) {\r\n    return IpcBusApi_6._ActivateIpcBusTrace(enable);\r\n}\r\nexports.ActivateIpcBusTrace = ActivateIpcBusTrace;\r\nfunction ActivateServiceTrace(enable) {\r\n    return IpcBusApi_7._ActivateServiceTrace(enable);\r\n}\r\nexports.ActivateServiceTrace = ActivateServiceTrace;\r\n//# sourceMappingURL=electron-ipc-bus.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/electron-ipc-bus/lib/electron-ipc-bus.js\n// module id = ./node_modules/electron-ipc-bus/lib/electron-ipc-bus.js\n// module chunks = 0","var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar stream = require('stream');\n\nfunction Lazy(em, opts) {\n    if (!(this instanceof Lazy)) return new Lazy(em, opts);\n    EventEmitter.call(this);\n    var self = this;\n\n\n    self.once = function (name, f) {\n        self.on(name, function g () {\n            self.removeListener(name, g);\n            f.apply(this, arguments);\n        });\n    }\n\n    if (!opts) opts = {};\n    var dataName = opts.data || 'data';\n    var pipeName = opts.pipe || 'pipe';\n    var endName = opts.pipe || 'end';\n\n    if (pipeName != endName) {\n        var piped = false;\n        self.once(pipeName, function () { piped = true });\n        self.once(endName, function () {\n            if (!piped) self.emit(pipeName);\n        });\n    }\n\n    self.push = function (x) {\n        self.emit(dataName, x);\n    }\n\n    self.end = function () {\n        self.emit(endName);\n    }\n\n    if (em && em.on) {\n        em.on(endName, function () {\n            self.emit(endName);\n        });\n        self.on(pipeName, function () {\n            em.emit(pipeName);\n        });\n        // Check for v0.10 or Greater (Stream2 has Duplex type)\n        if (stream.Duplex && em instanceof(stream)) {\n            em.on('readable', function () {\n                var x = em.read();\n                self.emit(dataName, x);\n            });\n        } else {\n            // Old Stream1 or Event support\n            em.on(dataName, function (x) {\n                self.emit(dataName, x);\n            });\n        }\n    }\n\n    function newLazy (g, h, l) {\n        if (!g) {\n            g = function () {\n                return true;\n            };\n        }\n        if (!h) {\n            h = function (x) {\n                return x;\n            };\n        }\n        var lazy = new Lazy(null, opts, l);\n        self.on(dataName, function (x, y) {\n            if (g.call(lazy, x)) {\n                lazy.emit(dataName, h(x), y);\n            }\n        });\n        self.once(pipeName, function () {\n            lazy.emit(pipeName);\n        });\n        return lazy;\n    }\n\n    self.filter = function (f) {\n        return newLazy(function (x) {\n            return f(x);\n        });\n    }\n\n    self.forEach = function (f) {\n        return newLazy(function (x) {\n            f(x);\n            return true;\n        });\n    }\n\n    self.map = function (f) {\n        return newLazy(\n            function () { return true },\n            function (x) { return f(x) }\n        );\n    }\n\n    self.head = function (f) {\n        var lazy = newLazy();\n        lazy.on(dataName, function g (x) {\n            f(x)\n            lazy.removeListener(dataName, g)\n        })\n    }\n\n    self.tail = function () {\n        var skip = true;\n        return newLazy(function () {\n            if (skip) {\n                skip = false;\n                return false;\n            }\n            return true;\n        });\n    }\n\n    self.skip = function (n) {\n        return newLazy(function () {\n            if (n > 0) {\n                n--;\n                return false;\n            }\n            return true;\n        });\n    }\n\n    self.take = function (n) {\n        return newLazy(function () {\n            if (n == 0) self.emit(pipeName);\n            return n-- > 0;\n        });\n    }\n\n    self.takeWhile = function (f) {\n        var cond = true;\n        return newLazy(function (x) {\n            if (cond && f(x)) return true;\n            cond = false;\n            self.emit(pipeName);\n            return false;\n        });\n    }\n\n    self.foldr = function (op, i, f) {\n        var acc = i;\n        var lazy = newLazy();\n        lazy.on(dataName, function g (x) {\n            acc = op(x, acc);\n        });\n        lazy.once(pipeName, function () {\n            f(acc);\n        });\n    }\n\n    self.sum = function (f) {\n        return self.foldr(function (x, acc) { return x + acc }, 0, f);\n    }\n\n    self.product = function (f) {\n        return self.foldr(function (x, acc) { return x*acc }, 1, f);\n    }\n\n    self.join = function (f) {\n        var data = []\n        var lazy = newLazy(function (x) {\n            data.push(x);\n            return true;\n        });\n        lazy.once(pipeName, function () { f(data) });\n        return self;\n    }\n\n    self.bucket = function (init, f) {\n        var lazy = new Lazy(null, opts);\n        var yieldTo = function (x) {\n            lazy.emit(dataName, x);\n        };\n\n        var acc = init;\n\n        self.on(dataName, function (x) {\n            acc = f.call(yieldTo, acc, x);\n        });\n\n        self.once(pipeName, function () {\n            lazy.emit(pipeName);\n        });\n\n        // flush on end event\n        self.once(endName, function () {\n            var finalBuffer = mergeBuffers(acc);\n            if (finalBuffer) {\n                yieldTo(finalBuffer);\n            }\n        });\n\n        return lazy;\n    }\n\n    // Streams that use this should emit strings or buffers only\n    self.__defineGetter__('lines', function () {\n        return self.bucket([], function (chunkArray, chunk) {\n            var newline = '\\n'.charCodeAt(0), lastNewLineIndex = 0;\n            if (typeof chunk === 'string') chunk = new Buffer(chunk);\n        if (chunk){\n            \tfor (var i = 0; i < chunk.length; i++) {\n                \tif (chunk[i] === newline) {\n                    \t// If we have content from the current chunk to append to our buffers, do it.\n                    \t\tif (i > 0) {\n                        \t\tchunkArray.push(chunk.slice(lastNewLineIndex, i));\n                    \t\t}\n\n                    \t\t// Wrap all our buffers and emit it.\n                    \t\tthis(mergeBuffers(chunkArray));\n                    \t\tlastNewLineIndex = i + 1;\n                \t}\n            }\n\t    }\n\n            if (lastNewLineIndex > 0) {\n                // New line found in the chunk, push the remaining part of the buffer.\n                if (lastNewLineIndex < chunk.length) {\n                    chunkArray.push(chunk.slice(lastNewLineIndex));\n                }\n            } else {\n                // No new line found, push the whole buffer.\n                if (chunk && chunk.length) {\n                    chunkArray.push(chunk);\n                }\n            }\n            return chunkArray;\n        });\n    });\n}\n\nLazy.range = function () {\n    var args = arguments;\n    var step = 1;\n    var infinite = false;\n\n    if (args.length == 1 && typeof args[0] == 'number') {\n        var i = 0, j = args[0];\n    }\n    else if (args.length == 1 && typeof args[0] == 'string') { // 'start[,next]..[end]'\n        var arg = args[0];\n        var startOpen = false, endClosed = false;\n        if (arg[0] == '(' || arg[0] == '[') {\n            if (arg[0] == '(') startOpen = true;\n            arg = arg.slice(1);\n        }\n        if (arg.slice(-1) == ']') endClosed = true;\n\n        var parts = arg.split('..');\n        if (parts.length != 2)\n            throw new Error(\"single argument range takes 'start..' or 'start..end' or 'start,next..end'\");\n\n        if (parts[1] == '') { // 'start..'\n            var i = parts[0];\n            infinite = true;\n        }\n        else { // 'start[,next]..end'\n            var progression = parts[0].split(',');\n            if (progression.length == 1) { // start..end\n                var i = parts[0], j = parts[1];\n            }\n            else { // 'start,next..end'\n                var i = progression[0], j = parts[1];\n                step = Math.abs(progression[1]-i);\n            }\n        }\n\n        i = parseInt(i, 10);\n        j = parseInt(j, 10);\n\n        if (startOpen) {\n            if (infinite || i < j) i++;\n            else i--;\n        }\n\n        if (endClosed) {\n            if (i < j) j++;\n            else j--;\n        }\n    }\n    else if (args.length == 2 || args.length == 3) { // start, end[, step]\n        var i = args[0], j = args[1];\n        if (args.length == 3) {\n            var step = args[2];\n        }\n    }\n    else {\n        throw new Error(\"range takes 1, 2 or 3 arguments\");\n    }\n    var lazy = new Lazy;\n    var stopInfinite = false;\n    lazy.on('pipe', function () {\n        stopInfinite = true;\n    });\n    if (infinite) {\n        process.nextTick(function g () {\n            if (stopInfinite) return;\n            lazy.emit('data', i++);\n            process.nextTick(g);\n        });\n    }\n    else {\n        process.nextTick(function () {\n            if (i < j) {\n                for (; i<j; i+=step) {\n                    lazy.emit('data', i)\n                }\n            }\n            else {\n                for (; i>j; i-=step) {\n                    lazy.emit('data', i)\n                }\n            }\n            lazy.emit('end');\n        });\n    }\n    return lazy;\n}\n\nvar mergeBuffers = function mergeBuffers(buffers) {\n  // We expect buffers to be a non-empty Array\n  if (!buffers || !Array.isArray(buffers) || !buffers.length) return;\n\n  var finalBufferLength, finalBuffer, currentBuffer, currentSize = 0;\n\n  // Sum all the buffers lengths\n  finalBufferLength = buffers.reduce(function(left, right) { return (left.length||left) + (right.length||right); }, 0);\n  finalBuffer = new Buffer(finalBufferLength);\n  while(buffers.length) {\n    currentBuffer = buffers.shift();\n    currentBuffer.copy(finalBuffer, currentSize);\n    currentSize += currentBuffer.length;\n  }\n\n  return finalBuffer;\n}\n\n\nutil.inherits(Lazy, EventEmitter);\nmodule.exports = Lazy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lazy/lazy.js\n// module id = ./node_modules/lazy/lazy.js\n// module chunks = 0","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/index.js\n// module id = ./node_modules/uuid/index.js\n// module chunks = 0","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/lib/bytesToUuid.js\n// module id = ./node_modules/uuid/lib/bytesToUuid.js\n// module chunks = 0","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/lib/rng.js\n// module id = ./node_modules/uuid/lib/rng.js\n// module chunks = 0","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/v1.js\n// module id = ./node_modules/uuid/v1.js\n// module chunks = 0","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/uuid/v4.js\n// module id = ./node_modules/uuid/v4.js\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = crypto\n// module chunks = 0","module.exports = require(\"electron\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"electron\"\n// module id = electron\n// module chunks = 0","module.exports = require(\"events\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"events\"\n// module id = events\n// module chunks = 0","module.exports = require(\"net\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"net\"\n// module id = net\n// module chunks = 0","module.exports = require(\"readline\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"readline\"\n// module id = readline\n// module chunks = 0","module.exports = require(\"stream\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"stream\"\n// module id = stream\n// module chunks = 0","module.exports = require(\"util\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"util\"\n// module id = util\n// module chunks = 0"],"sourceRoot":""}